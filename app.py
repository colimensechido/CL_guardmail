import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import time
import logging
import re

# Importar nuestros m√≥dulos
from database import create_database, SpamDatabase
from config import get_config
# from spam_detector import SpamDetector  # Lo crearemos despu√©s
# from email_monitor import EmailMonitor  # Lo crearemos despu√©s

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="CL_guardmail - Detector de SPAM",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

class SpamDetectorApp:
    """
    Clase principal de la aplicaci√≥n web de detecci√≥n de SPAM.
    
    Esta clase maneja toda la l√≥gica de la interfaz web:
    - Dashboard principal
    - Configuraci√≥n de cuentas
    - An√°lisis de correos
    - Sistema de entrenamiento
    - Visualizaci√≥n de datos
    """
    
    def __init__(self):
        """Inicializa la aplicaci√≥n web."""
        self.config = get_config()
        self.db = create_database()
        self.setup_session_state()
    
    def setup_session_state(self):
        """Configura el estado inicial de la sesi√≥n."""
        if 'current_page' not in st.session_state:
            st.session_state.current_page = 'dashboard'
        
        if 'last_auto_check' not in st.session_state:
            st.session_state.last_auto_check = {}
        
        if 'auto_check_enabled' not in st.session_state:
            st.session_state.auto_check_enabled = True
        
        # Nuevos estados para logging visual
        if 'auto_check_logs' not in st.session_state:
            st.session_state.auto_check_logs = []
        
        if 'current_checking_account' not in st.session_state:
            st.session_state.current_checking_account = None
        
        if 'check_start_time' not in st.session_state:
            st.session_state.check_start_time = None
    
    def add_log_entry(self, message: str, level: str = "INFO"):
        """
        Agrega una entrada al log visual del sistema autom√°tico.
        
        Args:
            message (str): Mensaje a agregar
            level (str): Nivel del log (INFO, SUCCESS, ERROR, WARNING)
        """
        timestamp = datetime.now().strftime("%H:%M:%S")
        log_entry = {
            'timestamp': timestamp,
            'message': message,
            'level': level
        }
        
        # Mantener solo los √∫ltimos 20 logs
        st.session_state.auto_check_logs.append(log_entry)
        if len(st.session_state.auto_check_logs) > 20:
            st.session_state.auto_check_logs.pop(0)
    
    def run_automatic_checks(self):
        """
        Ejecuta las revisiones autom√°ticas de correos seg√∫n los intervalos configurados.
        Esta funci√≥n se ejecuta en cada rerun de Streamlit.
        """
        if not st.session_state.auto_check_enabled:
            return
        
        try:
            # Obtener todas las cuentas activas
            accounts = self.get_email_accounts()
            current_time = time.time()
            
            # Log de inicio de ciclo
            self.add_log_entry("üîÑ Iniciando ciclo de revisi√≥n autom√°tica", "INFO")
            
            # Contador de revisiones programadas
            scheduled_checks = 0
            
            for account in accounts:
                if not account['is_active']:
                    continue
                
                account_id = account['id']
                check_interval = account['check_interval'] * 60  # Convertir a segundos
                
                # Verificar si es tiempo de revisar esta cuenta
                last_check = st.session_state.last_auto_check.get(account_id, 0)
                time_since_last_check = current_time - last_check
                
                if time_since_last_check >= check_interval:
                    scheduled_checks += 1
                    # Log de inicio de revisi√≥n
                    self.add_log_entry(f"üìß Iniciando revisi√≥n de {account['email']} (intervalo: {account['check_interval']} min)", "INFO")
                    st.session_state.current_checking_account = account['email']
                    st.session_state.check_start_time = current_time
                    
                    # Ejecutar revisi√≥n autom√°tica (no bloqueante)
                    try:
                        # Ejecutar en un thread separado o de forma as√≠ncrona
                        self.run_automatic_check_for_account(account_id, account)
                        st.session_state.last_auto_check[account_id] = current_time
                        
                        # Log de fin de revisi√≥n
                        st.session_state.current_checking_account = None
                        st.session_state.check_start_time = None
                        
                    except Exception as e:
                        self.add_log_entry(f"‚ùå Error en revisi√≥n de {account['email']}: {str(e)}", "ERROR")
                        st.session_state.current_checking_account = None
                        st.session_state.check_start_time = None
                        
                else:
                    # Calcular tiempo restante
                    time_remaining = check_interval - time_since_last_check
                    minutes_remaining = time_remaining / 60
                    
                    # Solo log si faltan menos de 5 minutos
                    if minutes_remaining <= 5:
                        self.add_log_entry(f"‚è∞ {account['email']}: Pr√≥xima revisi√≥n en {minutes_remaining:.1f} min", "INFO")
            
            # Log de fin de ciclo
            if scheduled_checks > 0:
                self.add_log_entry(f"‚úÖ Ciclo completado: {scheduled_checks} revisi√≥n(es) programada(s)", "SUCCESS")
            else:
                self.add_log_entry("‚úÖ Ciclo completado: No hay revisiones pendientes", "SUCCESS")
                    
        except Exception as e:
            self.add_log_entry(f"‚ùå Error en revisi√≥n autom√°tica: {str(e)}", "ERROR")
            logger.error(f"Error en revisi√≥n autom√°tica: {e}")

    def run_automatic_check_for_account(self, account_id: int, account: dict):
        """
        Ejecuta una revisi√≥n autom√°tica para una cuenta espec√≠fica.
        
        Args:
            account_id (int): ID de la cuenta
            account (dict): Informaci√≥n de la cuenta
        """
        try:
            self.add_log_entry(f"üîç Conectando a {account['email']}...", "INFO")
            
            # Importar y ejecutar la revisi√≥n
            from email_monitor import process_account_emails
            
            # Ejecutar con timeout para evitar bloqueos
            result = process_account_emails(
                account_id=account_id,
                max_emails=account['max_emails_per_check'],
                get_all=False,  # Solo correos recientes
                get_recent=False  # Usar comportamiento por defecto (no le√≠dos + le√≠dos recientes)
            )
            
            if result['success']:
                self.add_log_entry(f"‚úÖ {account['email']}: {result['emails_processed']} correos procesados, {result['spam_detected']} SPAM detectado", "SUCCESS")
                logger.info(f"‚úÖ Revisi√≥n autom√°tica completada para {account['email']}: {result['emails_processed']} correos procesados")
            else:
                self.add_log_entry(f"‚ùå {account['email']}: Error - {result.get('error', 'Error desconocido')}", "ERROR")
                logger.error(f"‚ùå Error en revisi√≥n autom√°tica para {account['email']}: {result.get('error', 'Error desconocido')}")
                
        except Exception as e:
            self.add_log_entry(f"‚ùå {account['email']}: Error de conexi√≥n - {str(e)}", "ERROR")
            logger.error(f"Error ejecutando revisi√≥n autom√°tica para cuenta {account_id}: {e}")

    def run(self):
        """
        Ejecuta la aplicaci√≥n principal.
        
        Incluye:
        - Configuraci√≥n inicial
        - Revisi√≥n autom√°tica de correos
        - Navegaci√≥n principal
        - Interfaz de usuario
        """
        # T√≠tulo principal
        st.title("üõ°Ô∏è CL_guardmail - Sistema de Detecci√≥n de SPAM")
        st.markdown("---")
        
        # Configurar estado inicial
        self.setup_session_state()
        
        # Ejecutar revisiones autom√°ticas
        self.run_automatic_checks()
        
        # Crear sidebar
        self.create_sidebar()
        
        # Navegaci√≥n principal
        if st.session_state.current_page == 'dashboard':
            self.show_dashboard()
        elif st.session_state.current_page == 'accounts':
            self.show_account_config()
        elif st.session_state.current_page == 'viewer':
            self.show_email_viewer()
        elif st.session_state.current_page == 'manual':
            self.show_manual_analysis()
        elif st.session_state.current_page == 'training':
            self.show_training()
        elif st.session_state.current_page == 'statistics':
            self.show_statistics()
        elif st.session_state.current_page == 'patterns':
            self.show_patterns()
        elif st.session_state.current_page == 'ml_models':
            self.show_ml_models()
    
    def create_sidebar(self):
        """
        Crea la barra lateral con navegaci√≥n y configuraciones.
        
        La sidebar contiene:
        - Men√∫ de navegaci√≥n
        - Informaci√≥n del sistema
        - Configuraciones r√°pidas
        """
        with st.sidebar:
            st.header("üß≠ Navegaci√≥n")
            
            # Men√∫ de navegaci√≥n
            page = st.selectbox(
                "Seleccionar p√°gina:",
                [
                    'dashboard',
                    'accounts',
                    'viewer',
                    'manual',
                    'training',
                    'statistics',
                    'patterns',
                    'ml_models'
                ],
                format_func=lambda x: {
                    'dashboard': 'üìä Dashboard',
                    'accounts': 'üìß Configurar Cuentas',
                    'viewer': 'üëÅÔ∏è Visualizar Correos',
                    'manual': 'üîç An√°lisis Manual',
                    'training': 'üéì Entrenamiento',
                    'statistics': 'üìà Estad√≠sticas',
                    'patterns': 'üîç Patrones',
                    'ml_models': 'ü§ñ Modelos ML'
                }[x],
                index=0
            )
            
            if page != st.session_state.current_page:
                st.session_state.current_page = page
                st.rerun()
            
            st.markdown("---")
            
            # Informaci√≥n del sistema
            st.header("‚ÑπÔ∏è Informaci√≥n del Sistema")
            
            # Estad√≠sticas r√°pidas
            try:
                total_accounts = self.get_total_accounts()
                total_emails = self.get_total_emails()
                total_spam = self.get_total_spam()
                
                st.metric("üìß Cuentas Configuradas", total_accounts)
                st.metric("üì® Correos Analizados", total_emails)
                st.metric("üö® SPAM Detectado", total_spam)
                
                if total_emails > 0:
                    spam_rate = (total_spam / total_emails) * 100
                    st.metric("üìä Tasa de SPAM", f"{spam_rate:.1f}%")
                
            except Exception as e:
                st.error(f"Error cargando estad√≠sticas: {e}")
            
            st.markdown("---")
            
            # Configuraciones r√°pidas
            st.header("‚öôÔ∏è Configuraciones")
            
            # Control del sistema autom√°tico
            auto_check_enabled = st.checkbox(
                "üîÑ Sistema Autom√°tico Activo",
                value=st.session_state.auto_check_enabled,
                help="Habilita/deshabilita las revisiones autom√°ticas de correos"
            )
            
            if auto_check_enabled != st.session_state.auto_check_enabled:
                st.session_state.auto_check_enabled = auto_check_enabled
                if auto_check_enabled:
                    st.success("‚úÖ Sistema autom√°tico activado")
                else:
                    st.warning("‚ö†Ô∏è Sistema autom√°tico desactivado")
                st.rerun()
            
            # Indicador de estado actual
            if st.session_state.current_checking_account:
                st.warning(f"‚è≥ Revisando: {st.session_state.current_checking_account}")
                if st.session_state.check_start_time:
                    elapsed_time = time.time() - st.session_state.check_start_time
                    st.caption(f"‚è±Ô∏è Tiempo: {elapsed_time:.1f}s")
            else:
                st.info("üí§ Sistema en espera")
            
            # Umbral de confianza
            confidence_threshold = st.slider(
                "Umbral de Confianza",
                min_value=0.0,
                max_value=1.0,
                value=0.7,
                step=0.1,
                help="Confianza m√≠nima para marcar como SPAM"
            )
            
            # Intervalo de revisi√≥n (solo informativo en sidebar)
            st.info("‚ÑπÔ∏è Los intervalos de revisi√≥n se configuran por cuenta en 'Configurar Cuentas'")
            
            st.markdown("---")
            
            # Bot√≥n de actualizaci√≥n
            if st.button("üîÑ Actualizar Datos"):
                st.rerun()
    
    def show_dashboard(self):
        """
        Muestra el dashboard principal con estad√≠sticas y gr√°ficos.
        
        El dashboard incluye:
        - Resumen de estad√≠sticas
        - Gr√°ficos de tendencias
        - √öltimos correos analizados
        - Alertas del sistema
        """
        st.header("üìä Dashboard Principal")
        
        # Indicador del sistema autom√°tico
        auto_status = "‚úÖ ACTIVO" if st.session_state.auto_check_enabled else "‚ùå INACTIVO"
        auto_color = "green" if st.session_state.auto_check_enabled else "red"
        
        col_status, col_spacer = st.columns([1, 3])
        with col_status:
            st.markdown(f"""
            <div style="background-color: {auto_color}; color: white; padding: 10px; border-radius: 5px; text-align: center;">
                <strong>üîÑ Sistema Autom√°tico: {auto_status}</strong>
            </div>
            """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # Crear columnas para m√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        
        try:
            with col1:
                total_accounts = self.get_total_accounts()
                st.metric("üìß Cuentas Activas", total_accounts)
            
            with col2:
                total_emails = self.get_total_emails()
                st.metric("üì® Correos Analizados", total_emails)
            
            with col3:
                total_spam = self.get_total_spam()
                st.metric("üö® SPAM Detectado", total_spam)
            
            with col4:
                if total_emails > 0:
                    accuracy = ((total_emails - total_spam) / total_emails) * 100
                    st.metric("‚úÖ Precisi√≥n", f"{accuracy:.1f}%")
                else:
                    st.metric("‚úÖ Precisi√≥n", "N/A")
        
        except Exception as e:
            st.error(f"Error cargando m√©tricas: {e}")
        
        st.markdown("---")
        
        # Gr√°ficos y visualizaciones
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Tendencias de SPAM")
            self.show_spam_trends()
        
        with col2:
            st.subheader("üéØ Categor√≠as de SPAM")
            self.show_spam_categories()
        
        # √öltimos correos analizados
        st.subheader("üìß √öltimos Correos Analizados")
        self.show_recent_emails()
        
        # Informaci√≥n del sistema autom√°tico
        st.subheader("üîÑ Estado del Sistema Autom√°tico")
        self.show_automatic_system_status()
        
        # Log visual en tiempo real
        st.subheader("üìã Log de Actividad en Tiempo Real")
        
        # Informaci√≥n sobre el sistema no-bloqueante
        with st.expander("‚ÑπÔ∏è ¬øC√≥mo funciona el sistema autom√°tico?", expanded=False):
            st.info("""
            **üîÑ Sistema No-Bloqueante:**
            
            - ‚úÖ **No bloquea la interfaz**: Puedes navegar libremente mientras revisa
            - ‚úÖ **Ejecuci√≥n en background**: Las revisiones se ejecutan sin afectar la UI
            - ‚úÖ **Logs en tiempo real**: Ves exactamente qu√© est√° haciendo
            - ‚úÖ **Continuidad**: El sistema sigue funcionando aunque cambies de p√°gina
            
            **‚ö° Optimizaciones:**
            - Las revisiones se ejecutan de forma as√≠ncrona
            - Timeouts para evitar bloqueos largos
            - Logs persistentes entre navegaciones
            - Indicadores visuales de progreso
            """)
        
        self.show_visual_log()
        
        # Alertas del sistema
        st.subheader("üö® Alertas del Sistema")
        self.show_system_alerts()
    
    def show_account_config(self):
        """
        Muestra la p√°gina de configuraci√≥n de cuentas de correo.
        
        Permite al usuario:
        - Agregar nuevas cuentas
        - Editar cuentas existentes
        - Eliminar cuentas
        - Configurar intervalos de revisi√≥n
        """
        st.header("üìß Configuraci√≥n de Cuentas de Correo")
        
        # Tabs para diferentes acciones
        tab1, tab2, tab3 = st.tabs(["‚ûï Agregar Cuenta", "‚úèÔ∏è Editar Cuentas", "üóëÔ∏è Eliminar Cuenta"])
        
        with tab1:
            self.show_add_account_form()
        
        with tab2:
            self.show_edit_accounts()
        
        with tab3:
            self.show_delete_account()
    
    def show_add_account_form(self):
        """
        Muestra el formulario para agregar una nueva cuenta de correo.
        
        El formulario incluye:
        - Email y contrase√±a
        - Configuraci√≥n del servidor
        - Intervalos de revisi√≥n
        - Validaciones
        """
        st.subheader("Agregar Nueva Cuenta")
        
        with st.form("add_account_form"):
            # Informaci√≥n b√°sica
            email = st.text_input("üìß Direcci√≥n de Correo", placeholder="usuario@gmail.com")
            password = st.text_input("üîë Contrase√±a", type="password")
            
            # Configuraci√≥n del servidor
            st.subheader("‚öôÔ∏è Configuraci√≥n del Servidor")
            
            # Selecci√≥n de servidor de correo
            st.subheader("üìß Seleccionar Proveedor de Correo")
            
            # Opciones de servidores populares
            server_options = {
                "Gmail": {
                    "imap_server": "imap.gmail.com",
                    "imap_port": 993,
                    "help": "Para cuentas @gmail.com",
                    "icon": "üìß"
                },
                "Outlook/Hotmail": {
                    "imap_server": "outlook.office365.com",
                    "imap_port": 993,
                    "help": "Para cuentas @outlook.com, @hotmail.com",
                    "icon": "üìß"
                },
                "Yahoo": {
                    "imap_server": "imap.mail.yahoo.com",
                    "imap_port": 993,
                    "help": "Para cuentas @yahoo.com",
                    "icon": "üìß"
                },
                "ProtonMail": {
                    "imap_server": "127.0.0.1",
                    "imap_port": 1143,
                    "help": "Para cuentas @protonmail.com (requiere Bridge)",
                    "icon": "üîí"
                },
                "iCloud": {
                    "imap_server": "imap.mail.me.com",
                    "imap_port": 993,
                    "help": "Para cuentas @icloud.com",
                    "icon": "üçé"
                },
                "Zoho": {
                    "imap_server": "imap.zoho.com",
                    "imap_port": 993,
                    "help": "Para cuentas @zoho.com",
                    "icon": "üìß"
                },
                "Otro (Personalizado)": {
                    "imap_server": "",
                    "imap_port": 993,
                    "help": "Para otros proveedores",
                    "icon": "‚öôÔ∏è"
                }
            }
            
            # Selector de servidor con iconos
            server_names = [f"{server_options[server]['icon']} {server}" for server in server_options.keys()]
            selected_server_with_icon = st.selectbox(
                "Proveedor de correo:",
                options=server_names,
                help="Selecciona tu proveedor de correo"
            )
            
            # Extraer nombre del servidor sin icono
            selected_server = selected_server_with_icon.split(" ", 1)[1] if " " in selected_server_with_icon else selected_server_with_icon
            
            # Mostrar configuraci√≥n del servidor seleccionado
            server_config = server_options[selected_server]
            
            # Campos del servidor
            col1, col2 = st.columns(2)
            
            # Determinar si es proveedor personalizado
            is_custom = (selected_server == "Otro (Personalizado)")
            
            with col1:
                imap_server = st.text_input(
                    "IMAP Server",
                    value=server_config["imap_server"],
                    help=server_config["help"],
                    disabled=not is_custom
                )
            
            with col2:
                imap_port = st.number_input(
                    "IMAP Puerto",
                    value=server_config["imap_port"],
                    min_value=1,
                    max_value=65535,
                    help="Puerto IMAP (normalmente 993 para SSL)",
                    disabled=not is_custom
                )
            
            # Informaci√≥n adicional seg√∫n el proveedor
            st.subheader("üìã Instrucciones Espec√≠ficas")
            
            if selected_server == "Gmail":
                with st.expander("üîß Configuraci√≥n de Gmail", expanded=True):
                    st.markdown("""
                    **üìã PASOS EXACTOS PARA GMAIL:**
                    
                    **1Ô∏è‚É£ Habilitar Verificaci√≥n en 2 Pasos:**
                    - Ve a [myaccount.google.com/security](https://myaccount.google.com/security)
                    - Busca "Verificaci√≥n en 2 pasos" y haz clic
                    - Sigue los pasos para habilitarla (SMS o app)
                    
                    **2Ô∏è‚É£ Generar Contrase√±a de Aplicaci√≥n:**
                    - Ve a [myaccount.google.com/apppasswords](https://myaccount.google.com/apppasswords)
                    - Selecciona "Otra aplicaci√≥n personalizada"
                    - Escribe "CL_guardmail" como nombre
                    - Haz clic en "Generar"
                    - **Copia la contrase√±a de 16 caracteres**
                    
                    **3Ô∏è‚É£ Configurar en CL_guardmail:**
                    - Email: tu_email@gmail.com
                    - Contrase√±a: **usa la contrase√±a de 16 caracteres** (NO tu contrase√±a normal)
                    - Servidor: imap.gmail.com (autom√°tico)
                    - Puerto: 993 (autom√°tico)
                    
                    **‚ö†Ô∏è IMPORTANTE:** Nunca uses tu contrase√±a normal de Gmail
                    """)
                    
            elif selected_server == "Outlook/Hotmail":
                with st.expander("üîß Configuraci√≥n de Outlook/Hotmail", expanded=True):
                    st.markdown("""
                    **üìã PASOS EXACTOS PARA OUTLOOK:**
                    
                    **1Ô∏è‚É£ Habilitar IMAP en Outlook:**
                    - Ve a [outlook.live.com/mail/0/options/mail/accounts](https://outlook.live.com/mail/0/options/mail/accounts)
                    - Busca "Configuraci√≥n de POP e IMAP"
                    - Habilita "Permitir que dispositivos y aplicaciones usen IMAP"
                    
                    **2Ô∏è‚É£ Para Cuentas Empresariales (Office 365):**
                    - Ve a [portal.office.com](https://portal.office.com)
                    - Configuraci√≥n ‚Üí Ver toda la configuraci√≥n de Outlook
                    - Correo ‚Üí Sincronizaci√≥n de correo electr√≥nico
                    - Marca "Permitir que dispositivos y aplicaciones usen IMAP"
                    
                    **3Ô∏è‚É£ Configurar en CL_guardmail:**
                    - Email: tu_email@outlook.com o tu_email@hotmail.com
                    - Contrase√±a: **tu contrase√±a normal** (no necesitas contrase√±a de app)
                    - Servidor: outlook.office365.com (autom√°tico)
                    - Puerto: 993 (autom√°tico)
                    
                    **‚úÖ VENTAJA:** No necesitas contrase√±a de aplicaci√≥n
                    """)
                    
            elif selected_server == "Yahoo":
                with st.expander("üîß Configuraci√≥n de Yahoo", expanded=True):
                    st.markdown("""
                    **üìã PASOS EXACTOS PARA YAHOO:**
                    
                    **1Ô∏è‚É£ Generar Contrase√±a de Aplicaci√≥n:**
                    - Ve a [login.yahoo.com/account/security](https://login.yahoo.com/account/security)
                    - Busca "Contrase√±as de aplicaci√≥n" o "App passwords"
                    - Haz clic en "Generar contrase√±a de aplicaci√≥n"
                    - Selecciona "Otra aplicaci√≥n"
                    - Escribe "CL_guardmail" como nombre
                    - **Copia la contrase√±a generada**
                    
                    **2Ô∏è‚É£ Si no ves "Contrase√±as de aplicaci√≥n":**
                    - Primero habilita "Verificaci√≥n en 2 pasos"
                    - Ve a [login.yahoo.com/account/security](https://login.yahoo.com/account/security)
                    - Busca "Verificaci√≥n en 2 pasos" y act√≠vala
                    - Luego vuelve a intentar generar la contrase√±a de aplicaci√≥n
                    
                    **3Ô∏è‚É£ Configurar en CL_guardmail:**
                    - Email: tu_email@yahoo.com
                    - Contrase√±a: **usa la contrase√±a de aplicaci√≥n** (NO tu contrase√±a normal)
                    - Servidor: imap.mail.yahoo.com (autom√°tico)
                    - Puerto: 993 (autom√°tico)
                    
                    **‚ö†Ô∏è IMPORTANTE:** Yahoo requiere contrase√±a de aplicaci√≥n
                    """)
                    
            elif selected_server == "ProtonMail":
                with st.expander("üîß Configuraci√≥n de ProtonMail", expanded=True):
                    st.markdown("""
                    **üìã PASOS EXACTOS PARA PROTONMAIL:**
                    
                    **1Ô∏è‚É£ Instalar ProtonMail Bridge:**
                    - Ve a [protonmail.com/bridge](https://protonmail.com/bridge)
                    - Descarga la versi√≥n para tu sistema operativo
                    - Instala y ejecuta ProtonMail Bridge
                    
                    **2Ô∏è‚É£ Configurar Bridge:**
                    - Abre ProtonMail Bridge
                    - Inicia sesi√≥n con tu cuenta ProtonMail
                    - Bridge te mostrar√° credenciales espec√≠ficas
                    - **Anota el email y contrase√±a que te da Bridge**
                    
                    **3Ô∏è‚É£ Configurar en CL_guardmail:**
                    - Email: **usa el email que te da Bridge** (no tu email normal)
                    - Contrase√±a: **usa la contrase√±a que te da Bridge**
                    - Servidor: 127.0.0.1 (autom√°tico)
                    - Puerto: 1143 (autom√°tico)
                    
                    **‚ö†Ô∏è IMPORTANTE:** Bridge debe estar ejecut√°ndose siempre
                    **üí° TIP:** Bridge crea un t√∫nel seguro entre CL_guardmail y ProtonMail
                    """)
                    
            elif selected_server == "iCloud":
                with st.expander("üîß Configuraci√≥n de iCloud", expanded=True):
                    st.markdown("""
                    **üìã PASOS EXACTOS PARA ICLOUD:**
                    
                    **1Ô∏è‚É£ Generar Contrase√±a de Aplicaci√≥n:**
                    - Ve a [appleid.apple.com](https://appleid.apple.com)
                    - Inicia sesi√≥n con tu Apple ID
                    - Ve a "Seguridad" ‚Üí "Contrase√±as de aplicaci√≥n"
                    - Haz clic en "Generar contrase√±a"
                    - Selecciona "Otra aplicaci√≥n" y escribe "CL_guardmail"
                    - **Copia la contrase√±a de 16 caracteres**
                    
                    **2Ô∏è‚É£ Si no ves "Contrase√±as de aplicaci√≥n":**
                    - Primero habilita "Verificaci√≥n en 2 pasos"
                    - Ve a [appleid.apple.com](https://appleid.apple.com)
                    - Seguridad ‚Üí Verificaci√≥n en 2 pasos
                    - Sigue los pasos para activarla
                    - Luego vuelve a intentar generar la contrase√±a de aplicaci√≥n
                    
                    **3Ô∏è‚É£ Configurar en CL_guardmail:**
                    - Email: tu_email@icloud.com
                    - Contrase√±a: **usa la contrase√±a de 16 caracteres** (NO tu contrase√±a normal)
                    - Servidor: imap.mail.me.com (autom√°tico)
                    - Puerto: 993 (autom√°tico)
                    
                    **‚ö†Ô∏è IMPORTANTE:** Nunca uses tu contrase√±a normal de Apple ID
                    """)
                    
            elif selected_server == "Zoho":
                with st.expander("üîß Configuraci√≥n de Zoho", expanded=True):
                    st.markdown("""
                    **üìã PASOS EXACTOS PARA ZOHO:**
                    
                    **1Ô∏è‚É£ Verificar Configuraci√≥n IMAP:**
                    - Ve a [mail.zoho.com](https://mail.zoho.com)
                    - Inicia sesi√≥n con tu cuenta Zoho
                    - Ve a Configuraci√≥n ‚Üí Cuentas de correo
                    - Busca "Configuraci√≥n IMAP" y aseg√∫rate de que est√© habilitado
                    
                    **2Ô∏è‚É£ Para Cuentas Empresariales:**
                    - Contacta a tu administrador de Zoho
                    - Pide que habilite el acceso IMAP para tu cuenta
                    - Verifica que no haya restricciones de seguridad
                    
                    **3Ô∏è‚É£ Configurar en CL_guardmail:**
                    - Email: tu_email@zoho.com
                    - Contrase√±a: **tu contrase√±a normal** (no necesitas contrase√±a de app)
                    - Servidor: imap.zoho.com (autom√°tico)
                    - Puerto: 993 (autom√°tico)
                    
                    **‚úÖ VENTAJA:** Configuraci√≥n simple, no requiere contrase√±a de aplicaci√≥n
                    **‚ö†Ô∏è NOTA:** Algunas cuentas empresariales pueden tener restricciones
                    """)
                    
            elif selected_server == "Otro (Personalizado)":
                with st.expander("üîß Configuraci√≥n Personalizada", expanded=True):
                    st.markdown("""
                    **üìã CONFIGURACI√ìN PARA SERVIDORES PERSONALIZADOS:**
                    
                    **1Ô∏è‚É£ Verificar Configuraci√≥n IMAP:**
                    - Contacta a tu proveedor de correo
                    - Pregunta por la configuraci√≥n IMAP
                    - Verifica que IMAP est√© habilitado en tu cuenta
                    
                    **2Ô∏è‚É£ Informaci√≥n Necesaria:**
                    - **Servidor IMAP:** (ej: imap.tuproveedor.com)
                    - **Puerto IMAP:** (normalmente 993 para SSL, 143 para no SSL)
                    - **Tipo de conexi√≥n:** SSL/TLS o STARTTLS
                    - **Credenciales:** email y contrase√±a
                    
                    **3Ô∏è‚É£ Configuraciones Comunes:**
                    
                    **üìß Empresarial (Exchange):**
                    - Servidor: outlook.office365.com
                    - Puerto: 993
                    - Usar contrase√±a normal
                    
                    **üìß Hosting Personal:**
                    - Servidor: mail.tudominio.com
                    - Puerto: 993 (SSL) o 143 (no SSL)
                    - Usar credenciales del hosting
                    
                    **üìß Otros Proveedores:**
                    - Consulta la documentaci√≥n de tu proveedor
                    - Busca "configuraci√≥n IMAP" en su sitio web
                    
                    **‚ö†Ô∏è IMPORTANTE:** Verifica la configuraci√≥n con tu proveedor antes de usar
                    """)
            
            # Configuraciones adicionales
            st.subheader("‚è∞ Configuraciones de Monitoreo")
            
            # Informaci√≥n sobre el sistema de revisi√≥n
            with st.expander("‚ÑπÔ∏è ¬øC√≥mo funciona la revisi√≥n autom√°tica?", expanded=False):
                st.markdown("""
                **üîç Sistema de Revisi√≥n Inteligente:**
                
                **üìß Correos Revisados:**
                - Solo se analizan **correos no le√≠dos** (UNSEEN)
                - Se evita procesar correos ya analizados
                - El sistema mantiene un registro de correos procesados
                
                **‚ö° Batch Size (Tama√±o de Lote):**
                - Define cu√°ntos correos se procesan en cada revisi√≥n
                - Ejemplo: Si pones 50, cada revisi√≥n traer√° hasta 50 correos nuevos
                - Valores recomendados: 10-100 (depende de tu volumen de correo)
                
                **‚è±Ô∏è Frecuencia de Revisi√≥n:**
                - Se ejecuta autom√°ticamente seg√∫n el intervalo configurado
                - Tambi√©n puedes forzar una revisi√≥n manual con el bot√≥n "üîÑ Revisar"
                
                **üíæ Eficiencia:**
                - Los correos ya analizados se marcan como procesados
                - No se repite el an√°lisis de correos ya revisados
                - Se optimiza el uso de recursos del servidor
                """)
            
            check_interval = st.selectbox(
                "Intervalo de Revisi√≥n",
                [1, 5, 10, 15, 30, 60],
                index=2,
                help="Cada cu√°ntos minutos revisar correos nuevos"
            )
            
            max_emails = st.number_input(
                "M√°ximo Correos por Revisi√≥n (Batch Size)",
                value=50,
                min_value=10,
                max_value=200,
                help="Cantidad m√°xima de correos no le√≠dos que se analizar√°n en cada revisi√≥n autom√°tica (batch size). Solo procesa correos nuevos."
            )
            
            # Botones de acci√≥n
            col1, col2 = st.columns(2)
            
            with col1:
                test_connection = st.form_submit_button("üîç Probar Conexi√≥n", type="secondary")
            
            with col2:
                submitted = st.form_submit_button("‚ûï Agregar Cuenta", type="primary")
            
            if test_connection:
                if self.validate_account_form(email, password, imap_server):
                    with st.spinner("üîç Probando conexi√≥n..."):
                        # Simular prueba de conexi√≥n (por ahora)
                        import time
                        time.sleep(2)
                        
                        # Aqu√≠ ir√≠a la l√≥gica real de prueba de conexi√≥n
                        if selected_server in ["Gmail", "Outlook/Hotmail", "Yahoo"]:
                            st.success("‚úÖ Conexi√≥n exitosa! Las credenciales son correctas.")
                        else:
                            st.warning("‚ö†Ô∏è Conexi√≥n simulada. Verifica manualmente las credenciales.")
                else:
                    st.error("‚ùå Completa todos los campos para probar la conexi√≥n")
            
            if submitted:
                if self.validate_account_form(email, password, imap_server):
                    success = self.add_email_account(
                        email, password, imap_server, imap_port, check_interval, max_emails
                    )
                    if success:
                        st.success("‚úÖ Cuenta agregada exitosamente!")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al agregar la cuenta")
                else:
                    st.error("‚ùå Por favor, completa todos los campos requeridos")
    
    def show_edit_accounts(self):
        """
        Muestra la lista de cuentas existentes para editar.
        
        Permite:
        - Ver todas las cuentas configuradas
        - Editar configuraciones
        - Activar/desactivar cuentas
        """
        st.subheader("Editar Cuentas Existentes")
        
        try:
            # Obtener cuentas de la base de datos
            accounts = self.get_email_accounts()
            
            if not accounts:
                st.info("üì≠ No hay cuentas configuradas")
                return
            
            # Mostrar cuentas con botones de acci√≥n
            st.subheader("üìã Cuentas Configuradas")
            
            for account in accounts:
                col1, col2, col3, col4, col5, col6, col7 = st.columns([3, 1, 1, 1, 1, 1, 1])
                
                with col1:
                    status_icon = "‚úÖ" if account['is_active'] else "‚ùå"
                    st.write(f"{status_icon} **{account['email']}**")
                    st.caption(f"Servidor: {account['server']} | √öltima revisi√≥n: {account['last_check_at'] or 'Nunca'}")
                
                with col2:
                    if st.button("üîÑ Revisar", key=f"revisar_{account['id']}", help="Forzar revisi√≥n inmediata"):
                        with st.spinner(f"Revisando {account['email']}..."):
                            result = self.force_email_check(account['id'])
                            
                            if result['success']:
                                st.success(f"‚úÖ Revisi√≥n completada para {result['account_email']}")
                                
                                # Mostrar estad√≠sticas principales
                                col_stats1, col_stats2, col_stats3 = st.columns(3)
                                with col_stats1:
                                    st.metric("üìß Encontrados", result['emails_found'])
                                with col_stats2:
                                    st.metric("üö® SPAM", result['spam_detected'])
                                with col_stats3:
                                    st.metric("‚úÖ HAM", result['ham_detected'])
                                
                                # Mostrar tiempo de procesamiento
                                if 'processing_time' in result:
                                    st.caption(f"‚è±Ô∏è Tiempo de procesamiento: {result['processing_time']:.2f} segundos")
                                
                                # Mostrar detalle de correos si hay
                                if result.get('emails_detail'):
                                    with st.expander("üìã Detalle de Correos Procesados", expanded=False):
                                        for i, email_detail in enumerate(result['emails_detail'], 1):
                                            spam_icon = "üö®" if email_detail['is_spam'] else "‚úÖ"
                                            confidence_pct = email_detail['confidence'] * 100
                                            
                                            st.write(f"{spam_icon} **{i}.** {email_detail['subject']}")
                                            st.caption(f"De: {email_detail['sender']} | Confianza: {confidence_pct:.1f}% | Score: {email_detail['spam_score']:.3f}")
                                
                                # Actualizar dashboard
                                st.rerun()
                            else:
                                st.error(f"‚ùå Error en revisi√≥n: {result['error']}")
                
                with col3:
                    if st.button("üì• Obtener TODOS", key=f"get_all_{account['id']}", help="Obtener TODOS los correos de Gmail"):
                        with st.spinner(f"Obteniendo TODOS los correos de {account['email']}..."):
                            result = self.force_email_check(account['id'], get_all=True)
                            
                            if result['success']:
                                st.success(f"‚úÖ Obtenidos TODOS los correos de {result['account_email']}")
                                
                                # Mostrar estad√≠sticas principales
                                col_stats1, col_stats2, col_stats3 = st.columns(3)
                                with col_stats1:
                                    st.metric("üìß Total Obtenidos", result['emails_found'])
                                with col_stats2:
                                    st.metric("üö® SPAM", result['spam_detected'])
                                with col_stats3:
                                    st.metric("‚úÖ HAM", result['ham_detected'])
                                
                                # Mostrar tiempo de procesamiento
                                if 'processing_time' in result:
                                    st.caption(f"‚è±Ô∏è Tiempo de procesamiento: {result['processing_time']:.2f} segundos")
                                
                                # Mostrar detalle de correos si hay
                                if result.get('emails_detail'):
                                    with st.expander("üìã Detalle de Correos Obtenidos", expanded=False):
                                        for i, email_detail in enumerate(result['emails_detail'], 1):
                                            spam_icon = "üö®" if email_detail['is_spam'] else "‚úÖ"
                                            confidence_pct = email_detail['confidence'] * 100
                                            
                                            st.write(f"{spam_icon} **{i}.** {email_detail['subject']}")
                                            st.caption(f"De: {email_detail['sender']} | Confianza: {confidence_pct:.1f}% | Score: {email_detail['spam_score']:.3f}")
                                
                                # Actualizar dashboard
                                st.rerun()
                            else:
                                st.error(f"‚ùå Error obteniendo correos: {result['error']}")
                
                with col4:
                    if st.button("üìÖ Recientes", key=f"get_recent_{account['id']}", help="Obtener correos recientes (√∫ltimos 7 d√≠as)"):
                        with st.spinner(f"Obteniendo correos recientes de {account['email']}..."):
                            result = self.force_email_check(account['id'], get_recent=True)
                            
                            if result['success']:
                                st.success(f"‚úÖ Obtenidos correos recientes de {result['account_email']}")
                                
                                # Mostrar estad√≠sticas principales
                                col_stats1, col_stats2, col_stats3 = st.columns(3)
                                with col_stats1:
                                    st.metric("üìß Recientes", result['emails_found'])
                                with col_stats2:
                                    st.metric("üö® SPAM", result['spam_detected'])
                                with col_stats3:
                                    st.metric("‚úÖ HAM", result['ham_detected'])
                                
                                # Mostrar tiempo de procesamiento
                                if 'processing_time' in result:
                                    st.caption(f"‚è±Ô∏è Tiempo de procesamiento: {result['processing_time']:.2f} segundos")
                                
                                # Mostrar detalle de correos si hay
                                if result.get('emails_detail'):
                                    with st.expander("üìã Detalle de Correos Recientes", expanded=False):
                                        for i, email_detail in enumerate(result['emails_detail'], 1):
                                            spam_icon = "üö®" if email_detail['is_spam'] else "‚úÖ"
                                            confidence_pct = email_detail['confidence'] * 100
                                            
                                            st.write(f"{spam_icon} **{i}.** {email_detail['subject']}")
                                            st.caption(f"De: {email_detail['sender']} | Confianza: {confidence_pct:.1f}% | Score: {email_detail['spam_score']:.3f}")
                                
                                # Actualizar dashboard
                                st.rerun()
                            else:
                                st.error(f"‚ùå Error obteniendo correos recientes: {result['error']}")
                
                with col5:
                    if st.button("‚úèÔ∏è Editar", key=f"editar_{account['id']}", help="Editar configuraci√≥n"):
                        st.session_state.selected_account = account['id']
                        st.rerun()
                
                with col6:
                    if st.button("üóëÔ∏è Eliminar", key=f"eliminar_{account['id']}", help="Eliminar cuenta"):
                        if st.checkbox(f"Confirmar eliminaci√≥n de {account['email']}", key=f"confirm_{account['id']}"):
                            success = self.delete_email_account(account['id'])
                            if success:
                                st.success("‚úÖ Cuenta eliminada exitosamente!")
                                st.rerun()
                            else:
                                st.error("‚ùå Error al eliminar la cuenta")
                
                with col7:
                    if st.button("üîç Diagnosticar", key=f"diagnosticar_{account['id']}", help="Diagnosticar el funcionamiento del sistema autom√°tico"):
                        with st.spinner(f"Diagnosticando {account['email']}..."):
                            from email_monitor import diagnose_account_emails
                            result = diagnose_account_emails(account['id'])
                            
                            if result['success']:
                                st.success(f"‚úÖ Diagn√≥stico completado para {result['account_email']}")
                                
                                # Mostrar informaci√≥n del diagn√≥stico
                                col_diag1, col_diag2, col_diag3 = st.columns(3)
                                
                                with col_diag1:
                                    st.metric("üìß No Le√≠dos (7 d√≠as)", result['unread_emails'])
                                    st.metric("üìß Le√≠dos (2 d√≠as)", result['recent_read_emails'])
                                
                                with col_diag2:
                                    st.metric("üìä Total Recientes", result['total_recent_emails'])
                                    st.metric("‚è±Ô∏è √öltima Revisi√≥n", result['last_check'] or "Nunca")
                                
                                with col_diag3:
                                    st.metric("‚öôÔ∏è Intervalo (min)", result['check_interval'])
                                    st.metric("üì¶ M√°ximo por Revisi√≥n", result['max_emails_per_check'])
                                
                                # Mostrar estado de la cuenta
                                status_icon = "‚úÖ" if result['is_active'] else "‚ùå"
                                st.info(f"{status_icon} **Estado de la cuenta:** {'Activa' if result['is_active'] else 'Inactiva'}")
                                
                                # Mostrar estad√≠sticas hist√≥ricas
                                col_stats1, col_stats2 = st.columns(2)
                                with col_stats1:
                                    st.metric("üìä Total Procesados", result['total_processed'])
                                with col_stats2:
                                    st.metric("üö® Total SPAM", result['total_spam'])
                                
                                # Recomendaciones
                                if result['total_recent_emails'] > 0:
                                    st.success("üéØ **El sistema autom√°tico deber√≠a procesar estos correos en la pr√≥xima revisi√≥n**")
                                else:
                                    st.info("üì≠ **No hay correos recientes para procesar**")
                                
                                if not result['is_active']:
                                    st.warning("‚ö†Ô∏è **La cuenta est√° inactiva. El sistema autom√°tico no funcionar√°.**")
                                
                            else:
                                st.error(f"‚ùå Error en diagn√≥stico: {result['error']}")
                
                st.markdown("---")
            
            # Formulario de edici√≥n
            st.subheader("‚úèÔ∏è Editar Cuenta")
            
            selected_email = st.selectbox(
                "Seleccionar cuenta para editar:",
                [acc['email'] for acc in accounts]
            )
            
            if selected_email:
                account = next((acc for acc in accounts if acc['email'] == selected_email), None)
                
                if account:
                    with st.form("edit_account_form"):
                        # Campos editables
                        is_active = st.checkbox("Cuenta Activa", value=account['is_active'])
                        check_interval = st.selectbox(
                            "Intervalo de Revisi√≥n (minutos)",
                            [1, 5, 10, 15, 30, 60],
                            index=[1, 5, 10, 15, 30, 60].index(account['check_interval'])
                        )
                        max_emails = st.number_input(
                            "M√°ximo Correos por Revisi√≥n",
                            value=account['max_emails_per_check'],
                            min_value=10,
                            max_value=200
                        )
                        
                        # Bot√≥n de actualizaci√≥n
                        if st.form_submit_button("üíæ Guardar Cambios"):
                            success = self.update_email_account(
                                account['id'], is_active, check_interval, max_emails
                            )
                            if success:
                                st.success("‚úÖ Cuenta actualizada exitosamente!")
                                st.rerun()
                            else:
                                st.error("‚ùå Error al actualizar la cuenta")
            
            # Bot√≥n para borrar correos duplicados
            st.markdown("---")
            st.subheader("üßπ Mantenimiento de Base de Datos")
            
            col_clean1, col_clean2 = st.columns([2, 1])
            
            with col_clean1:
                st.info("""
                **Borrar Correos Duplicados**: 
                Elimina registros duplicados bas√°ndose en el `email_id` √∫nico de cada correo.
                Esto ayuda a mantener la base de datos limpia y eficiente.
                """)
            
            with col_clean2:
                if st.button("üóëÔ∏è Borrar Correos Duplicados", type="secondary", help="Eliminar registros duplicados de la base de datos"):
                    with st.spinner("Analizando y eliminando correos duplicados..."):
                        result = self.clean_duplicate_emails()
                        
                        if result['success']:
                            st.success(f"‚úÖ Limpieza completada exitosamente!")
                            
                            # Mostrar estad√≠sticas de limpieza
                            col_stats1, col_stats2, col_stats3 = st.columns(3)
                            with col_stats1:
                                st.metric("üìä Total Antes", result['total_before'])
                            with col_stats2:
                                st.metric("üóëÔ∏è Eliminados", result['duplicates_removed'])
                            with col_stats3:
                                st.metric("üìä Total Despu√©s", result['total_after'])
                            
                            # Mostrar detalles si hay
                            if result.get('details'):
                                with st.expander("üìã Detalles de Limpieza", expanded=False):
                                    for detail in result['details']:
                                        st.write(f"‚Ä¢ **{detail['account_email']}**: {detail['total_emails']} correos restantes")
                            
                            st.rerun()
                        else:
                            st.error(f"‚ùå Error en limpieza: {result['error']}")
        
        except Exception as e:
            st.error(f"Error cargando cuentas: {e}")
    
    def show_delete_account(self):
        """
        Muestra la interfaz para eliminar cuentas de correo.
        
        Incluye:
        - Lista de cuentas disponibles
        - Confirmaci√≥n de eliminaci√≥n
        - Estad√≠sticas de la cuenta
        """
        st.subheader("üóëÔ∏è Eliminar Cuenta")
        
        try:
            accounts = self.get_email_accounts()
            
            if not accounts:
                st.info("üì≠ No hay cuentas para eliminar")
                return
            
            # Seleccionar cuenta
            selected_email = st.selectbox(
                "Seleccionar cuenta para eliminar:",
                [acc['email'] for acc in accounts]
            )
            
            if selected_email:
                account = next((acc for acc in accounts if acc['email'] == selected_email), None)
                
                if account:
                    # Mostrar informaci√≥n de la cuenta
                    st.info(f"üìß Cuenta: {account['email']}")
                    st.info(f"üìä Correos analizados: {account['total_emails_checked']}")
                    st.info(f"üö® SPAM detectado: {account['total_spam_detected']}")
                    
                    # Confirmaci√≥n
                    if st.button("üóëÔ∏è Eliminar Cuenta", type="primary"):
                        if st.checkbox("Confirmo que quiero eliminar esta cuenta"):
                            success = self.delete_email_account(account['id'])
                            if success:
                                st.success("‚úÖ Cuenta eliminada exitosamente!")
                                st.rerun()
                            else:
                                st.error("‚ùå Error al eliminar la cuenta")
                        else:
                            st.warning("‚ö†Ô∏è Debes confirmar la eliminaci√≥n")
        
        except Exception as e:
            st.error(f"Error: {e}")
    
    def show_manual_analysis(self):
        """
        Muestra la p√°gina de an√°lisis manual de correos.
        
        Permite al usuario:
        - Pegar contenido de correos
        - Analizar manualmente
        - Ver resultados detallados
        - Marcar como SPAM/HAM
        """
        st.header("üîç An√°lisis Manual de Correos")
        
        # Tabs para diferentes tipos de an√°lisis
        tab1, tab2 = st.tabs(["üìù Analizar Correo", "üìä Resultados Recientes"])
        
        with tab1:
            self.show_manual_analysis_form()
        
        with tab2:
            self.show_analysis_results()
    
    def show_manual_analysis_form(self):
        """
        Muestra el formulario para an√°lisis manual de correos.
        
        El formulario incluye:
        - Campo para contenido del correo
        - Informaci√≥n del remitente
        - An√°lisis en tiempo real
        - Resultados detallados
        """
        st.subheader("Analizar Correo Manualmente")
        
        with st.form("manual_analysis_form"):
            # Informaci√≥n del correo
            sender = st.text_input("üì§ Remitente", placeholder="remitente@ejemplo.com")
            subject = st.text_input("üìã Asunto", placeholder="Asunto del correo")
            
            # Contenido del correo
            content = st.text_area(
                "üìÑ Contenido del Correo",
                placeholder="Pega aqu√≠ el contenido del correo...",
                height=200
            )
            
            # Bot√≥n de an√°lisis
            submitted = st.form_submit_button("üîç Analizar Correo")
            
            if submitted and content:
                # Mostrar spinner durante el an√°lisis
                with st.spinner("üîç Analizando correo..."):
                    # Aqu√≠ ir√≠a la l√≥gica de an√°lisis
                    # Por ahora simulamos el resultado
                    result = self.analyze_email_manual(content, sender, subject)
                    
                    # Mostrar resultados
                    self.display_analysis_results(result)
            elif submitted and not content:
                st.error("‚ùå Por favor, ingresa el contenido del correo")
    
    def show_training(self):
        """
        Muestra la p√°gina de entrenamiento del modelo.
        
        Permite al usuario:
        - Marcar correos como SPAM/HAM
        - Agregar patrones
        - Ver m√©tricas de entrenamiento
        - Reentrenar el modelo
        """
        st.header("üéì Entrenamiento del Modelo")
        
        # Tabs para diferentes aspectos del entrenamiento
        tab1, tab2, tab3 = st.tabs(["üìù Marcar Correos", "üîç Agregar Patrones", "üìä M√©tricas"])
        
        with tab1:
            self.show_training_interface()
        
        with tab2:
            self.show_pattern_management()
        
        with tab3:
            self.show_training_metrics()
    
    def show_statistics(self):
        """
        Muestra la p√°gina de estad√≠sticas detalladas.
        
        Incluye:
        - Gr√°ficos de tendencias
        - Estad√≠sticas por categor√≠a
        - An√°lisis temporal
        - Reportes exportables
        """
        st.header("üìä Estad√≠sticas Detalladas")
        
        # Filtros de fecha
        col1, col2 = st.columns(2)
        
        with col1:
            start_date = st.date_input(
                "Fecha de inicio",
                value=datetime.now() - timedelta(days=30)
            )
        
        with col2:
            end_date = st.date_input(
                "Fecha de fin",
                value=datetime.now()
            )
        
        # Gr√°ficos
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Tendencias Temporales")
            self.show_temporal_trends(start_date, end_date)
        
        with col2:
            st.subheader("üéØ Distribuci√≥n por Categor√≠a")
            self.show_category_distribution(start_date, end_date)
        
        # Tabla de estad√≠sticas
        st.subheader("üìã Estad√≠sticas Detalladas")
        self.show_detailed_statistics(start_date, end_date)
    
    def show_patterns(self):
        """
        Muestra la p√°gina de gesti√≥n de patrones.
        
        Permite:
        - Ver patrones existentes
        - Agregar nuevos patrones
        - Editar patrones
        - Eliminar patrones
        """
        st.header("üîç Gesti√≥n de Patrones")
        
        # Tabs para diferentes acciones
        tab1, tab2, tab3 = st.tabs(["üìã Ver Patrones", "‚ûï Agregar Patr√≥n", "‚úèÔ∏è Editar Patrones"])
        
        with tab1:
            self.show_existing_patterns()
        
        with tab2:
            self.show_add_pattern_form()
        
        with tab3:
            self.show_edit_patterns()
    
    # ========================================
    # M√âTODOS AUXILIARES
    # ========================================
    
    def get_total_accounts(self) -> int:
        """Obtiene el total de cuentas configuradas."""
        try:
            result = self.db.cursor.execute(
                "SELECT COUNT(*) FROM email_accounts WHERE is_active = 1"
            ).fetchone()
            return result[0] if result else 0
        except Exception as e:
            logger.error(f"Error obteniendo total de cuentas: {e}")
            return 0
    
    def get_total_emails(self) -> int:
        """Obtiene el total de correos analizados."""
        try:
            result = self.db.cursor.execute(
                "SELECT COUNT(*) FROM analyzed_emails"
            ).fetchone()
            return result[0] if result else 0
        except Exception as e:
            logger.error(f"Error obteniendo total de correos: {e}")
            return 0
    
    def get_total_spam(self) -> int:
        """Obtiene el total de SPAM detectado."""
        try:
            result = self.db.cursor.execute(
                "SELECT COUNT(*) FROM analyzed_emails WHERE is_spam = 1"
            ).fetchone()
            return result[0] if result else 0
        except Exception as e:
            logger.error(f"Error obteniendo total de SPAM: {e}")
            return 0
    
    def get_email_accounts(self) -> list:
        """Obtiene todas las cuentas de correo configuradas."""
        try:
            result = self.db.cursor.execute(
                "SELECT * FROM email_accounts ORDER BY created_at DESC"
            ).fetchall()
            
            # Convertir a lista de diccionarios
            accounts = []
            for row in result:
                account = {
                    'id': row[0],
                    'email': row[1],
                    'password': row[2],
                    'server': row[3],
                    'port': row[4],
                    'protocol': row[5],
                    'is_active': bool(row[6]),
                    'check_interval': row[7],
                    'max_emails_per_check': row[8],
                    'created_at': row[9],
                    'last_check_at': row[10],
                    'total_emails_checked': row[11],
                    'total_spam_detected': row[12]
                }
                accounts.append(account)
            
            return accounts
        except Exception as e:
            logger.error(f"Error obteniendo cuentas: {e}")
            return []
    
    def get_recent_emails(self, limit: int = 10) -> list:
        """Obtiene los correos m√°s recientes analizados."""
        try:
            result = self.db.cursor.execute("""
                SELECT subject, sender, is_spam, confidence, spam_score, processed_at
                FROM analyzed_emails 
                ORDER BY processed_at DESC 
                LIMIT ?
            """, (limit,)).fetchall()
            
            return [
                {
                    'subject': row[0],
                    'sender': row[1],
                    'is_spam': bool(row[2]),
                    'confidence': row[3],
                    'spam_score': row[4],
                    'processed_at': row[5]
                }
                for row in result
            ]
        except Exception as e:
            logger.error(f"Error obteniendo correos recientes: {e}")
            return []
    
    def get_filtered_emails(self, filters: dict) -> list:
        """
        Obtiene correos filtrados seg√∫n criterios espec√≠ficos.
        
        Args:
            filters (dict): Diccionario con filtros aplicados
            
        Returns:
            list: Lista de correos filtrados
        """
        try:
            # Construir consulta base
            query = """
                SELECT 
                    ae.id,
                    ae.subject,
                    ae.sender,
                    ae.sender_domain,
                    ae.recipient,
                    ae.content,
                    ae.content_length,
                    ae.is_spam,
                    ae.confidence,
                    ae.spam_score,
                    ae.processed_at,
                    ae.received_at,
                    ea.email as account_email
                FROM analyzed_emails ae
                LEFT JOIN email_accounts ea ON ae.account_id = ea.id
                WHERE 1=1
            """
            
            params = []
            
            # Aplicar filtros
            if filters.get('search_text'):
                search_text = f"%{filters['search_text']}%"
                query += " AND (ae.subject LIKE ? OR ae.sender LIKE ? OR ae.content LIKE ?)"
                params.extend([search_text, search_text, search_text])
            
            if filters.get('spam_status') is not None:
                query += " AND ae.is_spam = ?"
                params.append(filters['spam_status'])
            
            if filters.get('confidence_min') is not None:
                query += " AND ae.confidence >= ?"
                params.append(filters['confidence_min'])
            
            if filters.get('confidence_max') is not None:
                query += " AND ae.confidence <= ?"
                params.append(filters['confidence_max'])
            
            if filters.get('spam_score_min') is not None:
                query += " AND ae.spam_score >= ?"
                params.append(filters['spam_score_min'])
            
            if filters.get('spam_score_max') is not None:
                query += " AND ae.spam_score <= ?"
                params.append(filters['spam_score_max'])
            
            if filters.get('sender_domain'):
                query += " AND ae.sender_domain LIKE ?"
                params.append(f"%{filters['sender_domain']}%")
            
            if filters.get('processed_date_from'):
                query += " AND DATE(ae.processed_at) >= ?"
                params.append(filters['processed_date_from'])
            
            if filters.get('processed_date_to'):
                query += " AND DATE(ae.processed_at) <= ?"
                params.append(filters['processed_date_to'])
            
            if filters.get('received_date_from'):
                query += " AND DATE(ae.received_at) >= ?"
                params.append(filters['received_date_from'])
            
            if filters.get('received_date_to'):
                query += " AND DATE(ae.received_at) <= ?"
                params.append(filters['received_date_to'])
            
            if filters.get('account_id'):
                query += " AND ae.account_id = ?"
                params.append(filters['account_id'])
            
            # Ordenar
            order_by = filters.get('order_by', 'processed_at')
            order_direction = filters.get('order_direction', 'DESC')
            query += f" ORDER BY ae.{order_by} {order_direction}"
            
            # Limitar resultados
            limit = filters.get('limit', 1000)
            query += f" LIMIT {limit}"
            
            # Ejecutar consulta
            result = self.db.cursor.execute(query, params).fetchall()
            
            return [
                {
                    'id': row[0],
                    'subject': row[1],
                    'sender': row[2],
                    'sender_domain': row[3],
                    'recipient': row[4],
                    'content': row[5],
                    'content_length': row[6],
                    'is_spam': bool(row[7]),
                    'confidence': row[8],
                    'spam_score': row[9],
                    'processed_at': row[10],
                    'received_at': row[11],
                    'account_email': row[12]
                }
                for row in result
            ]
            
        except Exception as e:
            logger.error(f"Error obteniendo correos filtrados: {e}")
            return []
    
    def get_email_accounts_for_filter(self) -> list:
        """Obtiene lista de cuentas para filtros."""
        try:
            result = self.db.cursor.execute("""
                SELECT id, email FROM email_accounts WHERE is_active = 1
                ORDER BY email
            """).fetchall()
            
            return [{'id': row[0], 'email': row[1]} for row in result]
        except Exception as e:
            logger.error(f"Error obteniendo cuentas para filtro: {e}")
            return []
    
    def get_spam_categories_for_filter(self) -> list:
        """Obtiene categor√≠as de SPAM para filtros."""
        try:
            result = self.db.cursor.execute("""
                SELECT id, name FROM spam_categories WHERE is_active = 1
                ORDER BY name
            """).fetchall()
            
            return [{'id': row[0], 'name': row[1]} for row in result]
        except Exception as e:
            logger.error(f"Error obteniendo categor√≠as para filtro: {e}")
            return []
    
    def get_spam_statistics(self) -> dict:
        """Obtiene estad√≠sticas detalladas de SPAM."""
        try:
            # Estad√≠sticas generales
            total_emails = self.get_total_emails()
            total_spam = self.get_total_spam()
            
            # Estad√≠sticas por d√≠a (√∫ltimos 7 d√≠as)
            result = self.db.cursor.execute("""
                SELECT DATE(processed_at) as date, 
                       COUNT(*) as total,
                       SUM(CASE WHEN is_spam = 1 THEN 1 ELSE 0 END) as spam_count
                FROM analyzed_emails 
                WHERE processed_at >= DATE('now', '-7 days')
                GROUP BY DATE(processed_at)
                ORDER BY date DESC
            """).fetchall()
            
            daily_stats = [
                {
                    'date': row[0],
                    'total': row[1],
                    'spam_count': row[2],
                    'spam_percentage': (row[2] / row[1] * 100) if row[1] > 0 else 0
                }
                for row in result
            ]
            
            return {
                'total_emails': total_emails,
                'total_spam': total_spam,
                'spam_percentage': (total_spam / total_emails * 100) if total_emails > 0 else 0,
                'daily_stats': daily_stats
            }
        except Exception as e:
            logger.error(f"Error obteniendo estad√≠sticas de SPAM: {e}")
            return {
                'total_emails': 0,
                'total_spam': 0,
                'spam_percentage': 0,
                'daily_stats': []
            }
    
    def validate_account_form(self, email: str, password: str, server: str) -> bool:
        """Valida el formulario de agregar cuenta."""
        return bool(email and password and server)
    
    def add_email_account(self, email: str, password: str, server: str, 
                         port: int, interval: int, max_emails: int) -> bool:
        """Agrega una nueva cuenta de correo."""
        try:
            self.db.cursor.execute("""
                INSERT INTO email_accounts (email, password, server, port, 
                                         check_interval, max_emails_per_check)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (email, password, server, port, interval, max_emails))
            self.db.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error agregando cuenta: {e}")
            return False
    
    def update_email_account(self, account_id: int, is_active: bool, 
                           interval: int, max_emails: int) -> bool:
        """Actualiza una cuenta de correo existente."""
        try:
            self.db.cursor.execute("""
                UPDATE email_accounts 
                SET is_active = ?, check_interval = ?, max_emails_per_check = ?
                WHERE id = ?
            """, (is_active, interval, max_emails, account_id))
            self.db.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error actualizando cuenta: {e}")
            return False
    
    def delete_email_account(self, account_id: int) -> bool:
        """Elimina una cuenta de correo."""
        try:
            self.db.cursor.execute("DELETE FROM email_accounts WHERE id = ?", (account_id,))
            self.db.conn.commit()
            return True
        except Exception as e:
            logger.error(f"Error eliminando cuenta: {e}")
            return False
    
    def force_email_check(self, account_id: int, get_all: bool = False, get_recent: bool = False) -> dict:
        """
        Fuerza una revisi√≥n manual de correos para una cuenta espec√≠fica.
        
        Args:
            account_id (int): ID de la cuenta a revisar
            get_all (bool): Si True, obtiene todos los correos (no solo no le√≠dos)
            get_recent (bool): Si True, obtiene correos recientes (√∫ltimos 7 d√≠as)
            
        Returns:
            dict: Resultado de la revisi√≥n con estad√≠sticas
        """
        try:
            # Importar el m√≥dulo de monitoreo
            from email_monitor import process_account_emails
            
            # Obtener informaci√≥n de la cuenta
            account = self.db.cursor.execute(
                "SELECT * FROM email_accounts WHERE id = ?", (account_id,)
            ).fetchone()
            
            if not account:
                return {"success": False, "error": "Cuenta no encontrada"}
            
            # Procesar correos usando el m√≥dulo real
            result = process_account_emails(account_id, account['max_emails_per_check'], get_all, get_recent)
            
            if result['success']:
                return {
                    "success": True,
                    "account_email": account['email'],
                    "emails_found": result['emails_processed'],
                    "spam_detected": result['spam_detected'],
                    "ham_detected": result['ham_detected'],
                    "processing_time": result['processing_time'],
                    "emails_detail": result.get('emails_detail', [])
                }
            else:
                return {
                    "success": False,
                    "error": result.get('error', 'Error desconocido')
                }
            
        except Exception as e:
            logger.error(f"Error en revisi√≥n manual: {e}")
            return {"success": False, "error": str(e)}
    
    def clean_duplicate_emails(self) -> dict:
        """
        Elimina correos duplicados de la base de datos.
        
        Busca registros con el mismo email_id y account_id, manteniendo solo
        el registro m√°s reciente (con processed_at m√°s reciente).
        
        Returns:
            dict: Resultado de la limpieza con estad√≠sticas
        """
        try:
            # Obtener total de correos antes de la limpieza
            self.db.cursor.execute("SELECT COUNT(*) FROM analyzed_emails")
            total_before = self.db.cursor.fetchone()[0]
            
            if total_before == 0:
                return {
                    "success": True,
                    "total_before": 0,
                    "total_after": 0,
                    "duplicates_removed": 0,
                    "message": "No hay correos en la base de datos"
                }
            
            # Identificar IDs de correos a mantener (los m√°s recientes)
            self.db.cursor.execute("""
                SELECT MAX(id) as keep_id
                FROM analyzed_emails 
                GROUP BY account_id, email_id
            """)
            
            keep_ids = [row['keep_id'] for row in self.db.cursor.fetchall()]
            
            # Identificar IDs de correos a eliminar
            self.db.cursor.execute("""
                SELECT id FROM analyzed_emails 
                WHERE id NOT IN ({})
            """.format(','.join(['?'] * len(keep_ids))), keep_ids)
            
            delete_ids = [row['id'] for row in self.db.cursor.fetchall()]
            
            if not delete_ids:
                return {
                    "success": True,
                    "total_before": total_before,
                    "total_after": total_before,
                    "duplicates_removed": 0,
                    "message": "No hay duplicados para eliminar"
                }
            
            # Eliminar registros relacionados primero
            # 1. Eliminar caracter√≠sticas de email
            self.db.cursor.execute("""
                DELETE FROM email_features 
                WHERE email_id IN ({})
            """.format(','.join(['?'] * len(delete_ids))), delete_ids)
            
            # 2. Eliminar categor√≠as de SPAM
            self.db.cursor.execute("""
                DELETE FROM email_spam_categories 
                WHERE email_id IN ({})
            """.format(','.join(['?'] * len(delete_ids))), delete_ids)
            
            # 3. Eliminar feedback del usuario
            self.db.cursor.execute("""
                DELETE FROM user_feedback 
                WHERE email_id IN ({})
            """.format(','.join(['?'] * len(delete_ids))), delete_ids)
            
            # 4. Finalmente eliminar los correos duplicados
            self.db.cursor.execute("""
                DELETE FROM analyzed_emails 
                WHERE id IN ({})
            """.format(','.join(['?'] * len(delete_ids))), delete_ids)
            
            # Obtener total despu√©s de la limpieza
            self.db.cursor.execute("SELECT COUNT(*) FROM analyzed_emails")
            total_after = self.db.cursor.fetchone()[0]
            
            # Calcular duplicados eliminados
            duplicates_removed = total_before - total_after
            
            # Obtener detalles por cuenta
            self.db.cursor.execute("""
                SELECT 
                    ea.email,
                    COUNT(*) as total_emails
                FROM analyzed_emails ae
                JOIN email_accounts ea ON ae.account_id = ea.id
                GROUP BY ae.account_id, ea.email
                ORDER BY ea.email
            """)
            
            account_details = []
            for row in self.db.cursor.fetchall():
                account_details.append({
                    'account_email': row['email'],
                    'total_emails': row['total_emails']
                })
            
            # Commit de los cambios
            self.db.conn.commit()
            
            return {
                "success": True,
                "total_before": total_before,
                "total_after": total_after,
                "duplicates_removed": duplicates_removed,
                "details": account_details,
                "message": f"Limpieza completada: {duplicates_removed} duplicados eliminados"
            }
            
        except Exception as e:
            logger.error(f"Error limpiando duplicados: {e}")
            return {
                "success": False,
                "error": str(e)
            }
    
    def analyze_email_manual(self, content: str, sender: str, subject: str) -> dict:
        """
        Analiza un correo manualmente (simulaci√≥n por ahora).
        
        Args:
            content (str): Contenido del correo
            sender (str): Remitente
            subject (str): Asunto
            
        Returns:
            dict: Resultados del an√°lisis
        """
        # Simulaci√≥n de an√°lisis
        import random
        
        # Calcular caracter√≠sticas b√°sicas
        content_length = len(content)
        caps_ratio = sum(1 for c in content if c.isupper()) / len(content) if content else 0
        exclamation_count = content.count('!')
        
        # Simular puntuaci√≥n de SPAM
        spam_score = random.uniform(0.1, 0.9)
        is_spam = spam_score > 0.7
        confidence = abs(spam_score - 0.5) * 2
        
        return {
            'is_spam': is_spam,
            'confidence': confidence,
            'spam_score': spam_score,
            'features': {
                'content_length': content_length,
                'caps_ratio': caps_ratio,
                'exclamation_count': exclamation_count
            },
            'categories': [
                {'name': 'Spam Comercial', 'confidence': 0.8},
                {'name': 'Phishing', 'confidence': 0.3}
            ] if is_spam else []
        }
    
    def display_analysis_results(self, result: dict):
        """
        Muestra los resultados del an√°lisis de un correo.
        
        Args:
            result (dict): Resultados del an√°lisis
        """
        # M√©tricas principales
        col1, col2, col3 = st.columns(3)
        
        with col1:
            status = "üö® SPAM" if result['is_spam'] else "‚úÖ HAM"
            st.metric("Resultado", status)
        
        with col2:
            st.metric("Confianza", f"{result['confidence']:.1%}")
        
        with col3:
            st.metric("Puntuaci√≥n SPAM", f"{result['spam_score']:.2f}")
        
        # Caracter√≠sticas extra√≠das
        st.subheader("üîç Caracter√≠sticas Extra√≠das")
        
        features_df = pd.DataFrame([
            {'Caracter√≠stica': k, 'Valor': v}
            for k, v in result['features'].items()
        ])
        
        st.dataframe(features_df, use_container_width=True)
        
        # Categor√≠as detectadas
        if result['categories']:
            st.subheader("üéØ Categor√≠as Detectadas")
            
            categories_df = pd.DataFrame(result['categories'])
            st.dataframe(categories_df, use_container_width=True)
        
        # Botones de acci√≥n
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("‚úÖ Marcar como HAM"):
                st.success("Correo marcado como HAM")
        
        with col2:
            if st.button("üö® Marcar como SPAM"):
                st.success("Correo marcado como SPAM")
    
    # M√©todos para gr√°ficos y visualizaciones (simulados por ahora)
    def show_spam_trends(self):
        """Muestra gr√°fico de tendencias de SPAM."""
        try:
            stats = self.get_spam_statistics()
            
            if not stats['daily_stats']:
                st.info("üìà No hay datos suficientes para mostrar tendencias")
                return
            
            # Crear gr√°fico de tendencias
            import plotly.express as px
            import pandas as pd
            
            df = pd.DataFrame(stats['daily_stats'])
            df['date'] = pd.to_datetime(df['date'])
            
            fig = px.line(df, x='date', y='spam_percentage', 
                         title='Tendencia de SPAM (√öltimos 7 d√≠as)',
                         labels={'spam_percentage': 'Porcentaje SPAM (%)', 'date': 'Fecha'})
            
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"Error mostrando tendencias: {e}")
    
    def show_spam_categories(self):
        """Muestra gr√°fico de categor√≠as de SPAM."""
        try:
            # Obtener estad√≠sticas por categor√≠a
            result = self.db.cursor.execute("""
                SELECT sc.name, COUNT(*) as count
                FROM analyzed_emails ae
                JOIN email_spam_categories esc ON ae.id = esc.email_id
                JOIN spam_categories sc ON esc.category_id = sc.id
                WHERE ae.is_spam = 1
                GROUP BY sc.name
                ORDER BY count DESC
                LIMIT 10
            """).fetchall()
            
            if not result:
                st.info("üéØ No hay categor√≠as de SPAM registradas a√∫n")
                return
            
            # Crear gr√°fico de barras
            import plotly.express as px
            import pandas as pd
            
            df = pd.DataFrame(result, columns=['Categor√≠a', 'Cantidad'])
            
            fig = px.bar(df, x='Cantidad', y='Categor√≠a', 
                        title='Top Categor√≠as de SPAM',
                        orientation='h')
            
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"Error mostrando categor√≠as: {e}")
    
    def show_recent_emails(self):
        """Muestra los correos m√°s recientes analizados."""
        try:
            recent_emails = self.get_recent_emails(10)
            
            if not recent_emails:
                st.info("üì≠ No hay correos analizados a√∫n")
                return
            
            # Mostrar correos en una tabla
            for email in recent_emails:
                spam_icon = "üö®" if email['is_spam'] else "‚úÖ"
                confidence_pct = email['confidence'] * 100 if email['confidence'] else 0
                
                col1, col2, col3 = st.columns([3, 1, 1])
                
                with col1:
                    st.write(f"{spam_icon} **{email['subject']}**")
                    st.caption(f"De: {email['sender']}")
                
                with col2:
                    st.caption(f"Confianza: {confidence_pct:.1f}%")
                
                with col3:
                    st.caption(f"Score: {email['spam_score']:.3f}")
                
                st.markdown("---")
                
        except Exception as e:
            st.error(f"Error mostrando correos recientes: {e}")
    
    def show_system_alerts(self):
        """
        Muestra alertas del sistema.
        
        Incluye:
        - Cuentas inactivas
        - Errores de conexi√≥n
        - Alertas de rendimiento
        """
        try:
            accounts = self.get_email_accounts()
            
            alerts = []
            
            # Verificar cuentas inactivas
            inactive_accounts = [acc for acc in accounts if not acc['is_active']]
            if inactive_accounts:
                alerts.append(f"‚ö†Ô∏è {len(inactive_accounts)} cuenta(s) inactiva(s)")
            
            # Verificar cuentas sin revisi√≥n reciente
            current_time = time.time()
            for account in accounts:
                if account['is_active'] and account['last_check_at']:
                    # Calcular tiempo desde √∫ltima revisi√≥n
                    last_check = datetime.fromisoformat(account['last_check_at'].replace('Z', '+00:00'))
                    time_since_check = (datetime.now() - last_check).total_seconds() / 60
                    
                    if time_since_check > account['check_interval'] * 2:  # M√°s del doble del intervalo
                        alerts.append(f"‚è∞ {account['email']}: Sin revisi√≥n reciente ({time_since_check:.0f} min)")
            
            if alerts:
                for alert in alerts:
                    st.warning(alert)
            else:
                st.success("‚úÖ Sistema funcionando correctamente")
                
        except Exception as e:
            st.error(f"Error cargando alertas: {e}")

    def show_automatic_system_status(self):
        """
        Muestra el estado detallado del sistema autom√°tico.
        
        Incluye:
        - Estado general del sistema
        - Cuentas activas y sus intervalos
        - √öltimas revisiones
        - Pr√≥ximas revisiones programadas
        """
        try:
            accounts = self.get_email_accounts()
            active_accounts = [acc for acc in accounts if acc['is_active']]
            
            if not active_accounts:
                st.info("üì≠ No hay cuentas activas configuradas")
                return
            
            # Mostrar estado general
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("üìß Cuentas Activas", len(active_accounts))
                
                # Calcular tiempo promedio hasta pr√≥xima revisi√≥n
                current_time = time.time()
                total_wait_time = 0
                account_count = 0
                
                for account in active_accounts:
                    last_check = st.session_state.last_auto_check.get(account['id'], 0)
                    check_interval = account['check_interval'] * 60
                    time_since_last = current_time - last_check
                    time_until_next = max(0, check_interval - time_since_last)
                    total_wait_time += time_until_next
                    account_count += 1
                
                if account_count > 0:
                    avg_wait_time = total_wait_time / account_count / 60  # Convertir a minutos
                    st.metric("‚è±Ô∏è Pr√≥xima Revisi√≥n Promedio", f"{avg_wait_time:.1f} min")
            
            with col2:
                # Mostrar cuentas con intervalos m√°s frecuentes
                frequent_accounts = [acc for acc in active_accounts if acc['check_interval'] <= 5]
                st.metric("‚ö° Revisi√≥n R√°pida (‚â§5 min)", len(frequent_accounts))
                
                # Mostrar cuentas con intervalos normales
                normal_accounts = [acc for acc in active_accounts if 5 < acc['check_interval'] <= 30]
                st.metric("üìä Revisi√≥n Normal (5-30 min)", len(normal_accounts))
            
            # Mostrar detalles de cada cuenta activa
            st.subheader("üìã Detalles de Cuentas Activas")
            
            for account in active_accounts:
                with st.expander(f"üìß {account['email']} (Intervalo: {account['check_interval']} min)", expanded=False):
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        last_check = st.session_state.last_auto_check.get(account['id'], 0)
                        if last_check > 0:
                            last_check_time = datetime.fromtimestamp(last_check)
                            st.write(f"**√öltima Revisi√≥n:** {last_check_time.strftime('%H:%M:%S')}")
                        else:
                            st.write("**√öltima Revisi√≥n:** Nunca")
                    
                    with col2:
                        current_time = time.time()
                        check_interval = account['check_interval'] * 60
                        time_since_last = current_time - last_check
                        time_until_next = max(0, check_interval - time_since_last)
                        
                        if time_until_next > 0:
                            st.write(f"**Pr√≥xima Revisi√≥n:** {time_until_next/60:.1f} min")
                        else:
                            st.write("**Pr√≥xima Revisi√≥n:** Inmediata")
                    
                    with col3:
                        st.write(f"**M√°ximo Correos:** {account['max_emails_per_check']}")
                        st.write(f"**Total Procesados:** {account['total_emails_checked']}")
            
            # Mostrar estad√≠sticas de rendimiento
            st.subheader("üìä Estad√≠sticas de Rendimiento")
            
            total_processed = sum(acc['total_emails_checked'] for acc in active_accounts)
            total_spam = sum(acc['total_spam_detected'] for acc in active_accounts)
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("üì® Total Procesados", total_processed)
            
            with col2:
                st.metric("üö® Total SPAM", total_spam)
            
            with col3:
                if total_processed > 0:
                    spam_rate = (total_spam / total_processed) * 100
                    st.metric("üìä Tasa de SPAM", f"{spam_rate:.1f}%")
                else:
                    st.metric("üìä Tasa de SPAM", "N/A")
                    
        except Exception as e:
            st.error(f"Error cargando estado del sistema autom√°tico: {e}")

    def show_visual_log(self):
        """
        Muestra el log visual en tiempo real del sistema autom√°tico.
        
        Incluye:
        - Estado actual del sistema
        - Timer de revisi√≥n actual
        - Historial de actividades
        - Indicadores visuales de estado
        """
        try:
            # Estado actual del sistema
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # Indicador de estado general
                if st.session_state.auto_check_enabled:
                    st.success("üîÑ Sistema Autom√°tico: ACTIVO")
                else:
                    st.error("‚ùå Sistema Autom√°tico: INACTIVO")
            
            with col2:
                # Cuenta actualmente siendo revisada
                if st.session_state.current_checking_account:
                    st.warning(f"‚è≥ Revisando: {st.session_state.current_checking_account}")
                    
                    # Timer de revisi√≥n actual
                    if st.session_state.check_start_time:
                        elapsed_time = time.time() - st.session_state.check_start_time
                        st.metric("‚è±Ô∏è Tiempo de Revisi√≥n", f"{elapsed_time:.1f}s")
                        
                        # Barra de progreso (simulada)
                        if elapsed_time < 30:  # Si lleva menos de 30 segundos
                            progress = min(elapsed_time / 30, 1.0)
                            st.progress(progress)
                            st.caption("üîÑ Procesando correos...")
                        else:
                            st.progress(1.0)
                            st.caption("‚è≥ Revisi√≥n en progreso...")
                else:
                    st.info("üí§ No hay revisiones en curso")
            
            with col3:
                # Pr√≥xima revisi√≥n programada
                accounts = self.get_email_accounts()
                active_accounts = [acc for acc in accounts if acc['is_active']]
                
                if active_accounts:
                    current_time = time.time()
                    next_check_time = float('inf')
                    next_account = None
                    
                    for account in active_accounts:
                        last_check = st.session_state.last_auto_check.get(account['id'], 0)
                        check_interval = account['check_interval'] * 60
                        time_since_last = current_time - last_check
                        time_until_next = max(0, check_interval - time_since_last)
                        
                        if time_until_next < next_check_time:
                            next_check_time = time_until_next
                            next_account = account
                    
                    if next_account and next_check_time < float('inf'):
                        minutes_remaining = next_check_time / 60
                        st.metric("‚è∞ Pr√≥xima Revisi√≥n", f"{minutes_remaining:.1f} min")
                        st.caption(f"Cuenta: {next_account['email']}")
                    else:
                        st.metric("‚è∞ Pr√≥xima Revisi√≥n", "Inmediata")
                else:
                    st.metric("‚è∞ Pr√≥xima Revisi√≥n", "N/A")
            
            st.markdown("---")
            
            # Historial de logs
            st.subheader("üìù Historial de Actividad")
            
            # Controles para el log
            col_controls1, col_controls2, col_controls3, col_controls4 = st.columns(4)
            
            with col_controls1:
                if st.button("üîÑ Actualizar Log", key="refresh_log"):
                    st.rerun()
            
            with col_controls2:
                if st.button("üóëÔ∏è Limpiar Log", key="clear_log"):
                    st.session_state.auto_check_logs = []
                    st.rerun()
            
            with col_controls3:
                auto_refresh = st.checkbox("üîÑ Auto-refresh", value=True, key="auto_refresh_log")
            
            with col_controls4:
                if st.button("‚ö° Forzar Revisi√≥n", key="force_check_now"):
                    self.add_log_entry("üîÑ Revisi√≥n manual forzada por usuario", "INFO")
                    self.run_automatic_checks()
                    st.rerun()
            
            # Mostrar logs
            if st.session_state.auto_check_logs:
                # Crear contenedor con scroll
                log_container = st.container()
                
                with log_container:
                    # Mostrar logs en orden inverso (m√°s recientes arriba)
                    for log_entry in reversed(st.session_state.auto_check_logs):
                        timestamp = log_entry['timestamp']
                        message = log_entry['message']
                        level = log_entry['level']
                        
                        # Color seg√∫n el nivel
                        if level == "SUCCESS":
                            st.success(f"üïê {timestamp} | {message}")
                        elif level == "ERROR":
                            st.error(f"üïê {timestamp} | {message}")
                        elif level == "WARNING":
                            st.warning(f"üïê {timestamp} | {message}")
                        else:
                            st.info(f"üïê {timestamp} | {message}")
            else:
                st.info("üì≠ No hay actividad registrada a√∫n")
            
            # Auto-refresh si est√° habilitado
            if auto_refresh:
                time.sleep(1)  # Peque√±a pausa para evitar spam
                st.rerun()
                
        except Exception as e:
            st.error(f"Error mostrando log visual: {e}")

    def show_analysis_results(self):
        """Muestra resultados de an√°lisis recientes."""
        st.info("üìä Resultados recientes (simulado)")
    
    def show_training_interface(self):
        """Muestra interfaz de entrenamiento."""
        st.info("üéì Interfaz de entrenamiento (simulado)")
    
    def show_pattern_management(self):
        """Muestra gesti√≥n de patrones."""
        st.info("üîç Gesti√≥n de patrones (simulado)")
    
    def show_training_metrics(self):
        """Muestra m√©tricas de entrenamiento."""
        st.info("üìä M√©tricas de entrenamiento (simulado)")
    
    def show_temporal_trends(self, start_date, end_date):
        """Muestra tendencias temporales."""
        st.info("üìà Tendencias temporales (simulado)")
    
    def show_category_distribution(self, start_date, end_date):
        """Muestra distribuci√≥n por categor√≠a."""
        st.info("üéØ Distribuci√≥n por categor√≠a (simulado)")
    
    def show_detailed_statistics(self, start_date, end_date):
        """Muestra estad√≠sticas detalladas."""
        st.info("üìã Estad√≠sticas detalladas (simulado)")
    
    def show_existing_patterns(self):
        """Muestra patrones existentes."""
        st.info("üìã Patrones existentes (simulado)")
    
    def show_add_pattern_form(self):
        """Muestra formulario para agregar patr√≥n."""
        st.info("‚ûï Formulario de patr√≥n (simulado)")
    
    def show_edit_patterns(self):
        """Muestra edici√≥n de patrones."""
        st.info("‚úèÔ∏è Edici√≥n de patrones (simulado)")
    
    def show_email_viewer(self):
        """
        Muestra la p√°gina de visualizaci√≥n y filtrado de correos.
        
        Permite al usuario:
        - Filtrar correos por m√∫ltiples criterios
        - Ver detalles completos de cada correo
        - Exportar resultados
        - Analizar patrones
        """
        st.header("üìß Visualizador de Correos")
        st.markdown("---")
        
        # Sidebar para filtros r√°pidos
        with st.sidebar:
            st.subheader("üîç Filtros R√°pidos")
            
            # Filtros b√°sicos
            quick_spam_filter = st.selectbox(
                "üö® Estado",
                ["Todos", "Solo SPAM", "Solo HAM"],
                help="Filtrar por clasificaci√≥n"
            )
            
            quick_account_filter = st.selectbox(
                "üìß Cuenta",
                ["Todas", "Gmail", "Outlook", "Yahoo"],
                help="Filtrar por proveedor"
            )
            
            # Filtros de fecha m√°s intuitivos
            st.subheader("üìÖ Per√≠odo")
            date_range = st.selectbox(
                "Rango de tiempo",
                ["√öltimas 24h", "√öltimos 7 d√≠as", "√öltimo mes", "√öltimo a√±o", "Personalizado"],
                help="Seleccionar per√≠odo de tiempo"
            )
            
            if date_range == "Personalizado":
                col1, col2 = st.columns(2)
                with col1:
                    custom_from = st.date_input("Desde")
                with col2:
                    custom_to = st.date_input("Hasta")
            else:
                custom_from = None
                custom_to = None
            
            # B√∫squeda r√°pida
            quick_search = st.text_input(
                "üîç Buscar",
                placeholder="Asunto, remitente...",
                help="B√∫squeda r√°pida en texto"
            )
            
            # Botones de acci√≥n r√°pida
            st.markdown("---")
            st.subheader("‚ö° Acciones")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ Aplicar Filtros", type="primary"):
                    self.apply_quick_filters(quick_spam_filter, quick_account_filter, date_range, custom_from, custom_to, quick_search)
            
            with col2:
                if st.button("üì§ Exportar", type="secondary"):
                    if 'filtered_emails' in st.session_state and st.session_state.filtered_emails:
                        self.export_emails_to_csv(st.session_state.filtered_emails)
                    else:
                        st.warning("No hay resultados para exportar")
        
        # Contenido principal
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader("üìä Correos Encontrados")
            
            # Bot√≥n para obtener todos los correos
            if st.button("üì• Obtener Todo el Correo y Revisarlo", type="primary", help="Obtener todos los correos de la base de datos"):
                all_filters = {
                    'limit': 1000,
                    'order_by': 'received_at',
                    'order_direction': 'DESC'
                }
                st.session_state.filtered_emails = self.get_filtered_emails(all_filters)
                st.success(f"‚úÖ Obtenidos {len(st.session_state.filtered_emails)} correos para revisi√≥n.")
            
            # Mostrar estad√≠sticas
            if 'filtered_emails' in st.session_state and st.session_state.filtered_emails:
                emails = st.session_state.filtered_emails
                
                # M√©tricas r√°pidas
                metric_col1, metric_col2, metric_col3, metric_col4 = st.columns(4)
                
                with metric_col1:
                    st.metric("üìß Total", len(emails))
                
                with metric_col2:
                    spam_count = sum(1 for email in emails if email['is_spam'])
                    st.metric("üö® SPAM", spam_count)
                
                with metric_col3:
                    ham_count = sum(1 for email in emails if not email['is_spam'])
                    st.metric("‚úÖ HAM", ham_count)
                
                with metric_col4:
                    if emails:
                        avg_confidence = sum(email['confidence'] for email in emails) / len(emails)
                        st.metric("üìä Confianza", f"{avg_confidence:.1%}")
                
                st.markdown("---")
                
                # Tabla mejorada
                self.show_improved_email_table(emails)
                
            else:
                st.info("üì≠ No hay correos filtrados. Usa los filtros para ver resultados.")
        
        with col2:
            st.subheader("üîß Filtros Avanzados")
            
            with st.expander("‚öôÔ∏è Configuraci√≥n Avanzada", expanded=False):
                self.show_advanced_filters()
    
    def show_improved_email_table(self, emails):
        """Muestra una tabla mejorada de correos."""
        
        # Crear DataFrame para mejor visualizaci√≥n
        email_data = []
        for email in emails:
            email_data.append({
                'Estado': "üö® SPAM" if email['is_spam'] else "‚úÖ HAM",
                'Asunto': email['subject'][:50] + "..." if len(email['subject']) > 50 else email['subject'],
                'Remitente': email['sender'][:30] + "..." if len(email['sender']) > 30 else email['sender'],
                'Dominio': email['sender_domain'],
                'Confianza': f"{email['confidence']:.1%}",
                'Score SPAM': f"{email['spam_score']:.3f}",
                'Recibido': email['received_at'] if email['received_at'] else "N/A",
                'Procesado': email['processed_at'],
                'ID': email['id']
            })
        
        df = pd.DataFrame(email_data)
        
        # Mostrar tabla con opciones de ordenamiento
        st.dataframe(
            df,
            column_config={
                "Estado": st.column_config.TextColumn("Estado", width="small"),
                "Asunto": st.column_config.TextColumn("Asunto", width="medium"),
                "Remitente": st.column_config.TextColumn("Remitente", width="medium"),
                "Dominio": st.column_config.TextColumn("Dominio", width="small"),
                "Confianza": st.column_config.TextColumn("Confianza", width="small"),
                "Score SPAM": st.column_config.TextColumn("Score SPAM", width="small"),
                "Recibido": st.column_config.TextColumn("Recibido", width="small"),
                "Procesado": st.column_config.TextColumn("Procesado", width="small"),
                "ID": st.column_config.NumberColumn("ID", width="small")
            },
            hide_index=True,
            use_container_width=True
        )
        
        # Botones de acci√≥n para correos seleccionados
        st.markdown("---")
        st.subheader("‚ö° Acciones en Lote")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚úÖ Marcar como HAM", type="primary"):
                st.info("Funci√≥n de marcado en lote (en desarrollo)")
        
        with col2:
            if st.button("üö® Marcar como SPAM", type="primary"):
                st.info("Funci√≥n de marcado en lote (en desarrollo)")
        
        with col3:
            if st.button("üì§ Exportar Seleccionados", type="secondary"):
                st.info("Funci√≥n de exportaci√≥n selectiva (en desarrollo)")
        
        with col4:
            if st.button("üóëÔ∏è Eliminar Seleccionados", type="secondary"):
                st.info("Funci√≥n de eliminaci√≥n en lote (en desarrollo)")
        
        # Secci√≥n para ver detalles de un correo espec√≠fico
        st.markdown("---")
        st.subheader("üëÅÔ∏è Ver Detalles de Correo")
        
        # Selector de correo para ver detalles
        if emails:
            email_options = [f"{'üö®' if email['is_spam'] else '‚úÖ'} {email['subject'][:50]}..." for email in emails]
            selected_email_index = st.selectbox(
                "Seleccionar correo para ver detalles:",
                range(len(emails)),
                format_func=lambda x: email_options[x] if x < len(email_options) else "N/A"
            )
            
            if st.button("üëÅÔ∏è Ver Detalles Completos"):
                selected_email = emails[selected_email_index]
                st.session_state.selected_email = selected_email
                st.success(f"‚úÖ Correo seleccionado: {selected_email['subject']}")
                
                # Mostrar detalles inmediatamente
                self.show_email_details()
    
    def show_advanced_filters(self):
        """Muestra filtros avanzados en un expander."""
        
        with st.form("advanced_filters_form"):
            # Secci√≥n 1: Filtros b√°sicos
            st.subheader("üîç Filtros B√°sicos")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Estado de SPAM
                spam_status = st.selectbox(
                    "üö® Estado de SPAM",
                    ["Todos", "Solo SPAM", "Solo HAM"],
                    help="Filtrar por clasificaci√≥n de SPAM"
                )
                
                # B√∫squeda de texto
                search_text = st.text_input(
                    "üîç Buscar en texto",
                    placeholder="Buscar en asunto, remitente o contenido...",
                    help="Busca en asunto, remitente y contenido del correo"
                )
            
            with col2:
                # Dominio del remitente
                sender_domain = st.text_input(
                    "üåê Dominio del remitente",
                    placeholder="gmail.com, outlook.com...",
                    help="Filtrar por dominio del remitente"
                )
                
                # Cuenta de correo
                accounts = self.get_email_accounts_for_filter()
                account_options = ["Todas las cuentas"] + [acc['email'] for acc in accounts]
                selected_account = st.selectbox(
                    "üìß Cuenta de correo",
                    account_options,
                    help="Filtrar por cuenta espec√≠fica"
                )
            
            st.markdown("---")
            
            # Secci√≥n 2: Rangos de valores
            st.subheader("üìä Rangos de Valores")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Rango de confianza
                st.write("**Confianza del an√°lisis**")
                confidence_range = st.slider(
                    "Confianza",
                    min_value=0.0,
                    max_value=1.0,
                    value=(0.0, 1.0),
                    step=0.1,
                    help="Rango de confianza del an√°lisis",
                    label_visibility="collapsed"
                )
                
                # Rango de puntuaci√≥n SPAM
                st.write("**Puntuaci√≥n SPAM**")
                spam_score_range = st.slider(
                    "Puntuaci√≥n SPAM",
                    min_value=0.0,
                    max_value=1.0,
                    value=(0.0, 1.0),
                    step=0.1,
                    help="Rango de puntuaci√≥n SPAM",
                    label_visibility="collapsed"
                )
            
            with col2:
                # Tama√±o del contenido
                st.write("**Tama√±o del contenido**")
                content_length_range = st.slider(
                    "Tama√±o del contenido",
                    min_value=0,
                    max_value=10000,
                    value=(0, 10000),
                    step=100,
                    help="Rango de tama√±o del contenido",
                    label_visibility="collapsed"
                )
                
                # L√≠mite de resultados
                st.write("**M√°ximo resultados**")
                limit = st.number_input(
                    "M√°ximo resultados",
                    min_value=10,
                    max_value=1000,
                    value=100,
                    step=10,
                    help="N√∫mero m√°ximo de correos a mostrar",
                    label_visibility="collapsed"
                )
            
            st.markdown("---")
            
            # Secci√≥n 3: Fechas
            st.subheader("üìÖ Filtros de Fecha")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Fechas de Procesamiento**")
                processed_from = st.date_input(
                    "Procesado desde",
                    value=datetime.now() - timedelta(days=30),
                    help="Fecha de inicio de procesamiento",
                    label_visibility="collapsed"
                )
                
                processed_to = st.date_input(
                    "Procesado hasta",
                    value=datetime.now(),
                    help="Fecha de fin de procesamiento",
                    label_visibility="collapsed"
                )
            
            with col2:
                st.write("**Fechas de Recepci√≥n**")
                received_from = st.date_input(
                    "Recibido desde",
                    value=datetime.now() - timedelta(days=30),
                    help="Fecha de inicio de recepci√≥n del correo",
                    label_visibility="collapsed"
                )
                
                received_to = st.date_input(
                    "Recibido hasta",
                    value=datetime.now(),
                    help="Fecha de fin de recepci√≥n del correo",
                    label_visibility="collapsed"
                )
            
            st.markdown("---")
            
            # Secci√≥n 4: Ordenamiento
            st.subheader("üìã Ordenamiento")
            
            col1, col2 = st.columns(2)
            
            with col1:
                order_by = st.selectbox(
                    "Ordenar por",
                    ["received_at", "processed_at", "subject", "sender", "spam_score", "confidence"],
                    format_func=lambda x: {
                        "received_at": "Fecha de recepci√≥n",
                        "processed_at": "Fecha de procesamiento",
                        "subject": "Asunto",
                        "sender": "Remitente",
                        "spam_score": "Puntuaci√≥n SPAM",
                        "confidence": "Confianza"
                    }[x],
                    help="Campo por el cual ordenar los resultados"
                )
            
            with col2:
                order_direction = st.selectbox(
                    "Direcci√≥n",
                    ["DESC", "ASC"],
                    format_func=lambda x: "Descendente" if x == "DESC" else "Ascendente",
                    help="Orden ascendente o descendente"
                )
            
            st.markdown("---")
            
            # Botones de acci√≥n
            col1, col2, col3 = st.columns(3)
            
            with col1:
                apply_advanced = st.form_submit_button("üîç Aplicar Filtros", type="primary")
            
            with col2:
                clear_advanced = st.form_submit_button("üóëÔ∏è Limpiar", type="secondary")
            
            with col3:
                export_advanced = st.form_submit_button("üì§ Exportar", type="secondary")
            
            if apply_advanced:
                # Construir filtros avanzados
                filters = {}
                
                # Filtros b√°sicos
                if spam_status == "Solo SPAM":
                    filters['spam_status'] = True
                elif spam_status == "Solo HAM":
                    filters['spam_status'] = False
                
                if search_text:
                    filters['search_text'] = search_text
                
                if sender_domain:
                    filters['sender_domain'] = sender_domain
                
                if selected_account != "Todas las cuentas":
                    account_id = next((acc['id'] for acc in accounts if acc['email'] == selected_account), None)
                    if account_id:
                        filters['account_id'] = account_id
                
                # Rangos de valores
                if confidence_range[0] > 0.0:
                    filters['confidence_min'] = confidence_range[0]
                if confidence_range[1] < 1.0:
                    filters['confidence_max'] = confidence_range[1]
                
                if spam_score_range[0] > 0.0:
                    filters['spam_score_min'] = spam_score_range[0]
                if spam_score_range[1] < 1.0:
                    filters['spam_score_max'] = spam_score_range[1]
                
                # Fechas
                filters['processed_date_from'] = processed_from.strftime('%Y-%m-%d')
                filters['processed_date_to'] = processed_to.strftime('%Y-%m-%d')
                filters['received_date_from'] = received_from.strftime('%Y-%m-%d')
                filters['received_date_to'] = received_to.strftime('%Y-%m-%d')
                
                # Ordenamiento
                filters['order_by'] = order_by
                filters['order_direction'] = order_direction
                filters['limit'] = limit
                
                # Aplicar filtros
                st.session_state.filtered_emails = self.get_filtered_emails(filters)
                st.success(f"‚úÖ Filtros avanzados aplicados. Encontrados {len(st.session_state.filtered_emails)} correos.")
            
            elif clear_advanced:
                if 'filtered_emails' in st.session_state:
                    del st.session_state.filtered_emails
                st.success("‚úÖ Filtros avanzados limpiados.")
            
            elif export_advanced:
                if 'filtered_emails' in st.session_state and st.session_state.filtered_emails:
                    self.export_emails_to_csv(st.session_state.filtered_emails)
                else:
                    st.warning("‚ö†Ô∏è No hay resultados para exportar. Aplica filtros primero.")
    
    def apply_quick_filters(self, spam_filter, account_filter, date_range, custom_from, custom_to, search_text):
        """Aplica filtros r√°pidos desde la sidebar."""
        filters = {}
        
        # Filtro de SPAM
        if spam_filter == "Solo SPAM":
            filters['spam_status'] = True
        elif spam_filter == "Solo HAM":
            filters['spam_status'] = False
        
        # Filtro de cuenta
        if account_filter != "Todas":
            filters['sender_domain'] = account_filter.lower().replace("gmail", "gmail.com").replace("outlook", "outlook.com").replace("yahoo", "yahoo.com")
        
        # Filtro de fecha
        if date_range == "Personalizado" and custom_from and custom_to:
            filters['received_date_from'] = custom_from.strftime('%Y-%m-%d')
            filters['received_date_to'] = custom_to.strftime('%Y-%m-%d')
        elif date_range != "Personalizado":
            # Calcular fechas basadas en el rango seleccionado
            end_date = datetime.now()
            if date_range == "√öltimas 24h":
                start_date = end_date - timedelta(days=1)
            elif date_range == "√öltimos 7 d√≠as":
                start_date = end_date - timedelta(days=7)
            elif date_range == "√öltimo mes":
                start_date = end_date - timedelta(days=30)
            elif date_range == "√öltimo a√±o":
                start_date = end_date - timedelta(days=365)
            else:
                start_date = end_date - timedelta(days=30)
            
            filters['received_date_from'] = start_date.strftime('%Y-%m-%d')
            filters['received_date_to'] = end_date.strftime('%Y-%m-%d')
        
        # Filtro de b√∫squeda
        if search_text:
            filters['search_text'] = search_text
        
        # Configuraci√≥n por defecto
        filters['order_by'] = 'received_at'
        filters['order_direction'] = 'DESC'
        filters['limit'] = 1000
        
        # Aplicar filtros
        st.session_state.filtered_emails = self.get_filtered_emails(filters)
        st.success(f"‚úÖ Filtros aplicados. Encontrados {len(st.session_state.filtered_emails)} correos.")
    
    def show_email_details(self):
        """Muestra detalles completos de un correo seleccionado."""
        st.subheader("üìã Detalles Completos")
        
        if 'selected_email' not in st.session_state:
            st.info("üëÜ Selecciona un correo de la tabla para ver sus detalles completos.")
            return
        
        email = st.session_state.selected_email
        
        # Informaci√≥n principal
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìß Informaci√≥n del Correo")
            st.write(f"**ID:** {email['id']}")
            st.write(f"**Asunto:** {email['subject']}")
            st.write(f"**Remitente:** {email['sender']}")
            st.write(f"**Destinatario:** {email['recipient']}")
            st.write(f"**Dominio:** {email['sender_domain']}")
            st.write(f"**Cuenta:** {email['account_email']}")
        
        with col2:
            st.subheader("üìä An√°lisis de SPAM")
            spam_icon = "üö®" if email['is_spam'] else "‚úÖ"
            st.write(f"**Clasificaci√≥n:** {spam_icon} {'SPAM' if email['is_spam'] else 'HAM'}")
            st.write(f"**Confianza:** {email['confidence']:.1%}")
            st.write(f"**Puntuaci√≥n SPAM:** {email['spam_score']:.3f}")
            st.write(f"**Tama√±o:** {email['content_length']} caracteres")
            st.write(f"**Procesado:** {email['processed_at']}")
            if email['received_at']:
                st.write(f"**Recibido:** {email['received_at']}")
        
        st.markdown("---")
        
        # Contenido completo
        st.subheader("üìÑ Contenido Completo")
        st.text_area("Contenido del correo", email['content'], height=300, disabled=True)
        
        # Caracter√≠sticas extra√≠das
        st.subheader("üîç Caracter√≠sticas Extra√≠das")
        self.show_email_features(email['id'])
        
        # Acciones
        st.subheader("‚ö° Acciones")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚úÖ Marcar como HAM"):
                self.update_email_classification(email['id'], False)
        
        with col2:
            if st.button("üö® Marcar como SPAM"):
                self.update_email_classification(email['id'], True)
        
        with col3:
            if st.button("üì§ Reenviar"):
                st.info("üì§ Funci√≥n de reenv√≠o (en desarrollo)")
        
        with col4:
            if st.button("üóëÔ∏è Eliminar"):
                if st.checkbox("Confirmar eliminaci√≥n"):
                    self.delete_email(email['id'])
    
    def show_email_features(self, email_id: int):
        """Muestra las caracter√≠sticas extra√≠das de un correo."""
        try:
            result = self.db.cursor.execute("""
                SELECT * FROM email_features WHERE email_id = ?
            """, (email_id,)).fetchone()
            
            if result:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**Longitud asunto:** {result[2]} caracteres")
                    st.write(f"**Longitud contenido:** {result[3]} caracteres")
                    st.write(f"**Longitud total:** {result[4]} caracteres")
                    st.write(f"**Ratio may√∫sculas:** {result[5]:.2%}")
                
                with col2:
                    st.write(f"**Exclamaciones:** {result[6]}")
                    st.write(f"**Interrogaciones:** {result[7]}")
                    st.write(f"**S√≠mbolos $:** {result[8]}")
                    st.write(f"**Palabras urgentes:** {result[9]}")
                
                with col3:
                    st.write(f"**Palabras SPAM:** {result[10]}")
                    st.write(f"**Dominio sospechoso:** {'S√≠' if result[11] else 'No'}")
                    st.write(f"**Muchos enlaces:** {result[12]}")
                    st.write(f"**Tiene adjuntos:** {'S√≠' if result[13] else 'No'}")
            else:
                st.info("üìä No hay caracter√≠sticas extra√≠das para este correo.")
                
        except Exception as e:
            st.error(f"Error obteniendo caracter√≠sticas: {e}")
    
    def show_email_analysis(self, email: dict):
        """Muestra an√°lisis detallado de un correo."""
        st.subheader("üìä An√°lisis Detallado")
        
        # Gr√°fico de caracter√≠sticas
        features = {
            'Confianza': email['confidence'],
            'Puntuaci√≥n SPAM': email['spam_score'],
            'Longitud': email['content_length'] / 1000  # Normalizar
        }
        
        fig = go.Figure(data=[
            go.Bar(x=list(features.keys()), y=list(features.values()))
        ])
        fig.update_layout(title="Caracter√≠sticas del Correo")
        st.plotly_chart(fig, use_container_width=True)
    
    def update_email_classification(self, email_id: int, is_spam: bool):
        """Actualiza la clasificaci√≥n de un correo."""
        try:
            self.db.cursor.execute("""
                UPDATE analyzed_emails 
                SET is_spam = ?, confidence = 1.0
                WHERE id = ?
            """, (is_spam, email_id))
            self.db.conn.commit()
            st.success(f"‚úÖ Correo marcado como {'SPAM' if is_spam else 'HAM'}")
        except Exception as e:
            st.error(f"Error actualizando clasificaci√≥n: {e}")
    
    def delete_email(self, email_id: int):
        """Elimina un correo de la base de datos."""
        try:
            self.db.cursor.execute("DELETE FROM analyzed_emails WHERE id = ?", (email_id,))
            self.db.conn.commit()
            st.success("‚úÖ Correo eliminado")
        except Exception as e:
            st.error(f"Error eliminando correo: {e}")
    
    def export_emails_to_csv(self, emails: list):
        """Exporta correos filtrados a CSV."""
        try:
            import pandas as pd
            
            # Preparar datos para exportaci√≥n
            export_data = []
            for email in emails:
                export_data.append({
                    'ID': email['id'],
                    'Asunto': email['subject'],
                    'Remitente': email['sender'],
                    'Dominio': email['sender_domain'],
                    'Destinatario': email['recipient'],
                    'Es SPAM': 'S√≠' if email['is_spam'] else 'No',
                    'Confianza': f"{email['confidence']:.1%}",
                    'Puntuaci√≥n SPAM': f"{email['spam_score']:.3f}",
                    'Tama√±o': email['content_length'],
                    'Procesado': email['processed_at'],
                    'Recibido': email['received_at'] if email['received_at'] else '',
                    'Cuenta': email['account_email']
                })
            
            df = pd.DataFrame(export_data)
            
            # Generar CSV
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            
            # Descargar archivo
            st.download_button(
                label="üì• Descargar CSV",
                data=csv,
                file_name=f"correos_filtrados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
            
            st.success("‚úÖ Archivo CSV generado correctamente")
            
        except Exception as e:
            st.error(f"Error exportando a CSV: {e}")

    def show_ml_models(self):
        """
        Muestra la p√°gina de gesti√≥n de modelos de Machine Learning.
        
        Permite:
        - Crear nuevos modelos
        - Editar modelos existentes
        - Gestionar ejemplos de entrenamiento
        - Ver estad√≠sticas de modelos
        """
        st.header("ü§ñ Gesti√≥n de Modelos de Machine Learning")
        
        # Tabs para diferentes acciones
        tab1, tab2, tab3 = st.tabs(["üìã Modelos", "‚ûï Crear Modelo", "üìä Estad√≠sticas"])
        
        with tab1:
            self.show_ml_models_list()
        
        with tab2:
            self.show_create_ml_model_form()
        
        with tab3:
            self.show_ml_statistics()

    def show_ml_models_list(self):
        """Muestra la lista de modelos de ML con opciones de gesti√≥n."""
        try:
            models = self.db.get_ml_models()
            
            if not models:
                st.info("üì≠ No hay modelos creados. Crea tu primer modelo en la pesta√±a 'Crear Modelo'")
                return
            
            st.subheader("üìã Modelos Existentes")
            
            for model in models:
                with st.expander(f"ü§ñ {model['name']} ({model['algorithm']})", expanded=False):
                    col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
                    
                    with col1:
                        st.write(f"**Descripci√≥n:** {model['description']}")
                        st.write(f"**Tipo:** {model['model_type']}")
                        st.write(f"**Estado:** {'‚úÖ Activo' if model['is_active'] else '‚ùå Inactivo'}")
                        st.write(f"**Precisi√≥n:** {model['accuracy']:.2%}")
                        st.write(f"**Ejemplos:** {model['total_examples']}")
                    
                    with col2:
                        if st.button("‚úèÔ∏è Editar", key=f"edit_model_{model['id']}"):
                            st.session_state.editing_model = model
                            st.rerun()
                    
                    with col3:
                        if st.button("üìö Ejemplos", key=f"examples_{model['id']}"):
                            st.session_state.viewing_model = model
                            st.rerun()
                    
                    with col4:
                        if st.button("üóëÔ∏è Eliminar", key=f"delete_model_{model['id']}"):
                            if st.checkbox(f"Confirmar eliminaci√≥n de {model['name']}", key=f"confirm_delete_{model['id']}"):
                                if self.db.delete_ml_model(model['id']):
                                    st.success("‚úÖ Modelo eliminado exitosamente!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå Error al eliminar el modelo")
            
            # Formulario de edici√≥n
            if hasattr(st.session_state, 'editing_model') and st.session_state.editing_model:
                st.markdown("---")
                st.subheader("‚úèÔ∏è Editar Modelo")
                self.show_edit_ml_model_form(st.session_state.editing_model)
            
            # Vista de ejemplos
            if hasattr(st.session_state, 'viewing_model') and st.session_state.viewing_model:
                st.markdown("---")
                st.subheader("üìö Ejemplos de Entrenamiento")
                self.show_model_examples(st.session_state.viewing_model)
                
        except Exception as e:
            st.error(f"Error cargando modelos: {e}")

    def show_create_ml_model_form(self):
        """Muestra el formulario para crear un nuevo modelo de ML."""
        st.subheader("‚ûï Crear Nuevo Modelo")
        
        with st.form("create_ml_model_form"):
            # Campos b√°sicos
            name = st.text_input("Nombre del Modelo", placeholder="Mi Modelo de SPAM")
            description = st.text_area("Descripci√≥n", placeholder="Descripci√≥n del modelo y su prop√≥sito")
            
            # Tipo de modelo
            model_type = st.selectbox(
                "Tipo de Modelo",
                ['spam_detector', 'category_classifier', 'sentiment_analyzer', 'custom'],
                help="Tipo de clasificaci√≥n que realizar√° el modelo"
            )
            
            # Algoritmo
            algorithm = st.selectbox(
                "Algoritmo",
                ['naive_bayes', 'svm', 'random_forest', 'logistic_regression', 'neural_network'],
                help="Algoritmo de Machine Learning a utilizar"
            )
            
            # Configuraci√≥n avanzada
            with st.expander("‚öôÔ∏è Configuraci√≥n Avanzada", expanded=False):
                # Par√°metros espec√≠ficos del algoritmo
                if algorithm == 'naive_bayes':
                    alpha = st.number_input("Alpha (suavizado)", value=1.0, min_value=0.1, step=0.1)
                    model_config = {'alpha': alpha}
                elif algorithm == 'svm':
                    kernel = st.selectbox("Kernel", ['rbf', 'linear', 'poly', 'sigmoid'])
                    c = st.number_input("C (regularizaci√≥n)", value=1.0, min_value=0.1, step=0.1)
                    model_config = {'kernel': kernel, 'C': c}
                elif algorithm == 'random_forest':
                    n_estimators = st.number_input("N√∫mero de √°rboles", value=100, min_value=10, step=10)
                    max_depth = st.number_input("Profundidad m√°xima", value=10, min_value=1, step=1)
                    model_config = {'n_estimators': n_estimators, 'max_depth': max_depth}
                else:
                    model_config = {}
            
            # Bot√≥n de creaci√≥n
            if st.form_submit_button("üöÄ Crear Modelo"):
                if name and description:
                    try:
                        model_id = self.db.create_ml_model(
                            name=name,
                            description=description,
                            model_type=model_type,
                            algorithm=algorithm,
                            model_config=model_config
                        )
                        st.success(f"‚úÖ Modelo '{name}' creado exitosamente!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error creando modelo: {e}")
                else:
                    st.error("‚ùå Completa todos los campos requeridos")

    def show_edit_ml_model_form(self, model: dict):
        """Muestra el formulario para editar un modelo existente."""
        with st.form(f"edit_ml_model_form_{model['id']}"):
            name = st.text_input("Nombre", value=model['name'])
            description = st.text_area("Descripci√≥n", value=model['description'])
            is_active = st.checkbox("Modelo Activo", value=model['is_active'])
            
            if st.form_submit_button("üíæ Guardar Cambios"):
                try:
                    success = self.db.update_ml_model(
                        model['id'],
                        name=name,
                        description=description,
                        is_active=is_active
                    )
                    if success:
                        st.success("‚úÖ Modelo actualizado exitosamente!")
                        del st.session_state.editing_model
                        st.rerun()
                    else:
                        st.error("‚ùå Error actualizando modelo")
                except Exception as e:
                    st.error(f"‚ùå Error: {e}")

    def show_model_examples(self, model: dict):
        """Muestra los ejemplos de entrenamiento de un modelo."""
        try:
            examples = self.db.get_training_examples(model['id'])
            stats = self.db.get_training_statistics(model['id'])
            
            # Estad√≠sticas r√°pidas
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("üìä Total Ejemplos", stats.get('total_examples', 0))
            with col2:
                st.metric("üö® SPAM", stats.get('spam_examples', 0))
            with col3:
                st.metric("‚úÖ HAM", stats.get('ham_examples', 0))
            with col4:
                st.metric("üìù Manuales", stats.get('manual_examples', 0))
            
            st.markdown("---")
            
            # Formulario para agregar ejemplo manual
            with st.expander("‚ûï Agregar Ejemplo Manual", expanded=False):
                self.show_add_manual_example_form(model['id'])
            
            # Lista de ejemplos
            st.subheader("üìö Ejemplos de Entrenamiento")
            
            if examples:
                for example in examples:
                    with st.expander(f"{'üö®' if example['classification'] else '‚úÖ'} {example['title']}", expanded=False):
                        col1, col2, col3 = st.columns([3, 1, 1])
                        
                        with col1:
                            st.write(f"**Contenido:** {example['content'][:100]}...")
                            st.write(f"**Fuente:** {example['source_type']}")
                            if example['email_subject']:
                                st.write(f"**Email:** {example['email_subject']}")
                        
                        with col2:
                            if st.button("‚úèÔ∏è Editar", key=f"edit_example_{example['id']}"):
                                st.session_state.editing_example = example
                        
                        with col3:
                            if st.button("üóëÔ∏è Eliminar", key=f"delete_example_{example['id']}"):
                                if self.db.delete_training_example(example['id']):
                                    st.success("‚úÖ Ejemplo eliminado!")
                                    st.rerun()
                                else:
                                    st.error("‚ùå Error eliminando ejemplo")
            
            # Formulario para agregar ejemplo desde email
            with st.expander("üìß Agregar desde Email", expanded=False):
                self.show_add_email_example_form(model['id'])
        except Exception as e:
            st.error(f"Error cargando ejemplos: {e}")
            
        if not examples:
            st.info("üì≠ No hay ejemplos de entrenamiento. Agrega algunos para comenzar.")
            
            # Bot√≥n para volver
            if st.button("üîô Volver a Modelos"):
                del st.session_state.viewing_model
                st.rerun()

    def show_add_manual_example_form(self, model_id: int):
        """Muestra el formulario para agregar un ejemplo manual."""
        with st.form(f"add_manual_example_form_{model_id}"):
            title = st.text_input("T√≠tulo del Ejemplo", placeholder="Ejemplo de SPAM")
            content = st.text_area("Contenido", placeholder="Contenido del ejemplo...")
            classification = st.selectbox(
                "Clasificaci√≥n",
                [True, False],
                format_func=lambda x: "üö® SPAM" if x else "‚úÖ HAM"
            )
            
            if st.form_submit_button("‚ûï Agregar Ejemplo"):
                if title and content:
                    try:
                        example_id = self.db.add_training_example(
                            model_id=model_id,
                            title=title,
                            content=content,
                            classification=classification,
                            source_type='manual'
                        )
                        st.success("‚úÖ Ejemplo agregado exitosamente!")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Error agregando ejemplo: {e}")
                else:
                    st.error("‚ùå Completa todos los campos")

    def show_add_email_example_form(self, model_id: int):
        """Muestra el formulario para agregar un ejemplo desde un email existente."""
        try:
            # Obtener emails disponibles
            emails = self.get_filtered_emails({'limit': 100})
            
            if not emails:
                st.warning("üì≠ No hay emails disponibles para agregar como ejemplos.")
                return
            
            with st.form(f"add_email_example_form_{model_id}"):
                # Selector de email
                email_options = [f"{'üö®' if email['is_spam'] else '‚úÖ'} {email['subject'][:50]}... | {email['sender']}" for email in emails]
                selected_email_index = st.selectbox(
                    "üìß Seleccionar Email",
                    range(len(emails)),
                    format_func=lambda x: email_options[x] if x < len(email_options) else "N/A",
                    help="Selecciona un email para agregarlo como ejemplo de entrenamiento"
                )
                
                # Mostrar informaci√≥n del email seleccionado
                if selected_email_index < len(emails):
                    selected_email = emails[selected_email_index]
                    
                    st.write(f"**Asunto:** {selected_email['subject']}")
                    st.write(f"**Remitente:** {selected_email['sender']}")
                    st.write(f"**Clasificaci√≥n actual:** {'üö® SPAM' if selected_email['is_spam'] else '‚úÖ HAM'}")
                    st.write(f"**Confianza:** {selected_email['confidence']:.1%}")
                    
                    # Permitir cambiar la clasificaci√≥n
                    new_classification = st.selectbox(
                        "üéØ Clasificaci√≥n para entrenamiento",
                        [True, False],
                        index=0 if selected_email['is_spam'] else 1,
                        format_func=lambda x: "üö® SPAM" if x else "‚úÖ HAM",
                        help="Clasificaci√≥n que se usar√° para entrenar el modelo"
                    )
                    
                    # T√≠tulo personalizado
                    custom_title = st.text_input(
                        "üìù T√≠tulo del ejemplo",
                        value=f"Email: {selected_email['subject'][:30]}...",
                        help="T√≠tulo personalizado para el ejemplo de entrenamiento"
                    )
                
                if st.form_submit_button("‚ûï Agregar como Ejemplo"):
                    if selected_email_index < len(emails):
                        selected_email = emails[selected_email_index]
                        
                        try:
                            # Extraer caracter√≠sticas del email
                            features = self.extract_email_features(selected_email)
                            
                            example_id = self.db.add_training_example(
                                model_id=model_id,
                                title=custom_title,
                                content=selected_email['content'],
                                classification=new_classification,
                                source_type='email',
                                email_id=selected_email['id'],
                                features_extracted=features
                            )
                            
                            st.success("‚úÖ Email agregado como ejemplo de entrenamiento!")
                            st.rerun()
                            
                        except Exception as e:
                            st.error(f"‚ùå Error agregando email como ejemplo: {e}")
                    else:
                        st.error("‚ùå Selecciona un email v√°lido")
                        
        except Exception as e:
            st.error(f"Error en formulario de email: {e}")

    def extract_email_features(self, email: dict) -> dict:
        """Extrae caracter√≠sticas de un email para el entrenamiento."""
        try:
            # Obtener caracter√≠sticas de la base de datos
            result = self.db.cursor.execute("""
                SELECT * FROM email_features WHERE email_id = ?
            """, (email['id'],)).fetchone()
            
            if result:
                return {
                    'subject_length': result[2],
                    'content_length': result[3],
                    'total_length': result[4],
                    'caps_ratio': result[5],
                    'exclamation_count': result[6],
                    'question_count': result[7],
                    'dollar_count': result[8],
                    'urgent_words': result[9],
                    'spam_words': result[10],
                    'has_suspicious_domain': result[11],
                    'has_many_links': result[12],
                    'has_attachments': result[13]
                }
            else:
                # Caracter√≠sticas b√°sicas si no est√°n en la BD
                content = email['content'].lower()
                return {
                    'subject_length': len(email['subject']),
                    'content_length': len(email['content']),
                    'total_length': len(email['subject'] + email['content']),
                    'caps_ratio': sum(1 for c in content if c.isupper()) / len(content) if content else 0,
                    'exclamation_count': content.count('!'),
                    'question_count': content.count('?'),
                    'dollar_count': content.count('$'),
                    'urgent_words': sum(1 for word in ['urgente', 'urgent', 'important', 'importante'] if word in content),
                    'spam_words': sum(1 for word in ['gratis', 'free', 'gana', 'win', 'dinero', 'money'] if word in content),
                    'has_suspicious_domain': 0,
                    'has_many_links': len(re.findall(r'http[s]?://', content)),
                    'has_attachments': email.get('has_attachments', False)
                }
                
        except Exception as e:
            logger.error(f"Error extrayendo caracter√≠sticas: {e}")
            return {}

    def show_ml_statistics(self):
        """Muestra estad√≠sticas generales de los modelos de ML."""
        try:
            models = self.db.get_ml_models()
            
            if not models:
                st.info("üì≠ No hay modelos para mostrar estad√≠sticas")
                return
            
            st.subheader("üìä Estad√≠sticas Generales")
            
            # M√©tricas generales
            total_models = len(models)
            active_models = len([m for m in models if m['is_active']])
            total_examples = sum(m['total_examples'] for m in models)
            avg_accuracy = sum(m['accuracy'] for m in models) / total_models if total_models > 0 else 0
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("ü§ñ Total Modelos", total_models)
            with col2:
                st.metric("‚úÖ Modelos Activos", active_models)
            with col3:
                st.metric("üìö Total Ejemplos", total_examples)
            with col4:
                st.metric("üìä Precisi√≥n Promedio", f"{avg_accuracy:.2%}")
            
            # Gr√°fico de modelos por algoritmo
            st.subheader("üìà Distribuci√≥n por Algoritmo")
            algorithm_counts = {}
            for model in models:
                algo = model['algorithm']
                algorithm_counts[algo] = algorithm_counts.get(algo, 0) + 1
            
            if algorithm_counts:
                fig = go.Figure(data=[go.Pie(labels=list(algorithm_counts.keys()), 
                                         values=list(algorithm_counts.values()))])
                fig.update_layout(title="Modelos por Algoritmo")
                st.plotly_chart(fig, use_container_width=True)
            
            # Tabla de modelos
            st.subheader("üìã Resumen de Modelos")
            df = pd.DataFrame(models)
            df['accuracy'] = df['accuracy'].apply(lambda x: f"{x:.2%}")
            df['is_active'] = df['is_active'].apply(lambda x: "‚úÖ" if x else "‚ùå")
            
            st.dataframe(df[['name', 'algorithm', 'accuracy', 'total_examples', 'is_active']], 
                        use_container_width=True)
            
        except Exception as e:
            st.error(f"Error cargando estad√≠sticas: {e}")

    def show_analysis_results(self):
        """Muestra resultados de an√°lisis recientes."""
        st.info("üìä Resultados recientes (simulado)")
    
    def show_training_interface(self):
        """Muestra interfaz de entrenamiento."""
        st.info("üéì Interfaz de entrenamiento (simulado)")
    
    def show_pattern_management(self):
        """Muestra gesti√≥n de patrones."""
        st.info("üîç Gesti√≥n de patrones (simulado)")
    
    def show_training_metrics(self):
        """Muestra m√©tricas de entrenamiento."""
        st.info("üìä M√©tricas de entrenamiento (simulado)")
    
    def show_temporal_trends(self, start_date, end_date):
        """Muestra tendencias temporales."""
        st.info("üìà Tendencias temporales (simulado)")
    
    def show_category_distribution(self, start_date, end_date):
        """Muestra distribuci√≥n por categor√≠a."""
        st.info("üéØ Distribuci√≥n por categor√≠a (simulado)")
    
    def show_detailed_statistics(self, start_date, end_date):
        """Muestra estad√≠sticas detalladas."""
        st.info("üìã Estad√≠sticas detalladas (simulado)")
    
    def show_existing_patterns(self):
        """Muestra patrones existentes."""
        st.info("üìã Patrones existentes (simulado)")
    
    def show_add_pattern_form(self):
        """Muestra formulario para agregar patr√≥n."""
        st.info("‚ûï Formulario de patr√≥n (simulado)")
    
    def show_edit_patterns(self):
        """Muestra edici√≥n de patrones."""
        st.info("‚úèÔ∏è Edici√≥n de patrones (simulado)")
    
    def show_email_viewer(self):
        """
        Muestra la p√°gina de visualizaci√≥n y filtrado de correos.
        
        Permite al usuario:
        - Filtrar correos por m√∫ltiples criterios
        - Ver detalles completos de cada correo
        - Exportar resultados
        - Analizar patrones
        """
        st.header("üìß Visualizador de Correos")
        st.markdown("---")
        
        # Sidebar para filtros r√°pidos
        with st.sidebar:
            st.subheader("üîç Filtros R√°pidos")
            
            # Filtros b√°sicos
            quick_spam_filter = st.selectbox(
                "üö® Estado",
                ["Todos", "Solo SPAM", "Solo HAM"],
                help="Filtrar por clasificaci√≥n"
            )
            
            quick_account_filter = st.selectbox(
                "üìß Cuenta",
                ["Todas", "Gmail", "Outlook", "Yahoo"],
                help="Filtrar por proveedor"
            )
            
            # Filtros de fecha m√°s intuitivos
            st.subheader("üìÖ Per√≠odo")
            date_range = st.selectbox(
                "Rango de tiempo",
                ["√öltimas 24h", "√öltimos 7 d√≠as", "√öltimo mes", "√öltimo a√±o", "Personalizado"],
                help="Seleccionar per√≠odo de tiempo"
            )
            
            if date_range == "Personalizado":
                col1, col2 = st.columns(2)
                with col1:
                    custom_from = st.date_input("Desde")
                with col2:
                    custom_to = st.date_input("Hasta")
            else:
                custom_from = None
                custom_to = None
            
            # B√∫squeda r√°pida
            quick_search = st.text_input(
                "üîç Buscar",
                placeholder="Asunto, remitente...",
                help="B√∫squeda r√°pida en texto"
            )
            
            # Botones de acci√≥n r√°pida
            st.markdown("---")
            st.subheader("‚ö° Acciones")
            
            col1, col2 = st.columns(2)
            with col1:
                if st.button("üîÑ Aplicar Filtros", type="primary"):
                    self.apply_quick_filters(quick_spam_filter, quick_account_filter, date_range, custom_from, custom_to, quick_search)
            
            with col2:
                if st.button("üì§ Exportar", type="secondary"):
                    if 'filtered_emails' in st.session_state and st.session_state.filtered_emails:
                        self.export_emails_to_csv(st.session_state.filtered_emails)
                    else:
                        st.warning("No hay resultados para exportar")
        
        # Contenido principal
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.subheader("üìä Correos Encontrados")
            
            # Bot√≥n para obtener todos los correos
            if st.button("üì• Obtener Todo el Correo y Revisarlo", type="primary", help="Obtener todos los correos de la base de datos"):
                all_filters = {
                    'limit': 1000,
                    'order_by': 'received_at',
                    'order_direction': 'DESC'
                }
                st.session_state.filtered_emails = self.get_filtered_emails(all_filters)
                st.success(f"‚úÖ Obtenidos {len(st.session_state.filtered_emails)} correos para revisi√≥n.")
            
            # Mostrar estad√≠sticas
            if 'filtered_emails' in st.session_state and st.session_state.filtered_emails:
                emails = st.session_state.filtered_emails
                
                # M√©tricas r√°pidas
                metric_col1, metric_col2, metric_col3, metric_col4 = st.columns(4)
                
                with metric_col1:
                    st.metric("üìß Total", len(emails))
                
                with metric_col2:
                    spam_count = sum(1 for email in emails if email['is_spam'])
                    st.metric("üö® SPAM", spam_count)
                
                with metric_col3:
                    ham_count = sum(1 for email in emails if not email['is_spam'])
                    st.metric("‚úÖ HAM", ham_count)
                
                with metric_col4:
                    if emails:
                        avg_confidence = sum(email['confidence'] for email in emails) / len(emails)
                        st.metric("üìä Confianza", f"{avg_confidence:.1%}")
                
                st.markdown("---")
                
                # Tabla mejorada
                self.show_improved_email_table(emails)
                
            else:
                st.info("üì≠ No hay correos filtrados. Usa los filtros para ver resultados.")
        
        with col2:
            st.subheader("üîß Filtros Avanzados")
            
            with st.expander("‚öôÔ∏è Configuraci√≥n Avanzada", expanded=False):
                self.show_advanced_filters()
    
    def show_improved_email_table(self, emails):
        """Muestra una tabla mejorada de correos."""
        
        # Crear DataFrame para mejor visualizaci√≥n
        email_data = []
        for email in emails:
            email_data.append({
                'Estado': "üö® SPAM" if email['is_spam'] else "‚úÖ HAM",
                'Asunto': email['subject'][:50] + "..." if len(email['subject']) > 50 else email['subject'],
                'Remitente': email['sender'][:30] + "..." if len(email['sender']) > 30 else email['sender'],
                'Dominio': email['sender_domain'],
                'Confianza': f"{email['confidence']:.1%}",
                'Score SPAM': f"{email['spam_score']:.3f}",
                'Recibido': email['received_at'] if email['received_at'] else "N/A",
                'Procesado': email['processed_at'],
                'ID': email['id']
            })
        
        df = pd.DataFrame(email_data)
        
        # Mostrar tabla con opciones de ordenamiento
        st.dataframe(
            df,
            column_config={
                "Estado": st.column_config.TextColumn("Estado", width="small"),
                "Asunto": st.column_config.TextColumn("Asunto", width="medium"),
                "Remitente": st.column_config.TextColumn("Remitente", width="medium"),
                "Dominio": st.column_config.TextColumn("Dominio", width="small"),
                "Confianza": st.column_config.TextColumn("Confianza", width="small"),
                "Score SPAM": st.column_config.TextColumn("Score SPAM", width="small"),
                "Recibido": st.column_config.TextColumn("Recibido", width="small"),
                "Procesado": st.column_config.TextColumn("Procesado", width="small"),
                "ID": st.column_config.NumberColumn("ID", width="small")
            },
            hide_index=True,
            use_container_width=True
        )
        
        # Botones de acci√≥n para correos seleccionados
        st.markdown("---")
        st.subheader("‚ö° Acciones en Lote")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚úÖ Marcar como HAM", type="primary"):
                st.info("Funci√≥n de marcado en lote (en desarrollo)")
        
        with col2:
            if st.button("üö® Marcar como SPAM", type="primary"):
                st.info("Funci√≥n de marcado en lote (en desarrollo)")
        
        with col3:
            if st.button("üì§ Exportar Seleccionados", type="secondary"):
                st.info("Funci√≥n de exportaci√≥n selectiva (en desarrollo)")
        
        with col4:
            if st.button("üóëÔ∏è Eliminar Seleccionados", type="secondary"):
                st.info("Funci√≥n de eliminaci√≥n en lote (en desarrollo)")
        
        # Secci√≥n para ver detalles de un correo espec√≠fico
        st.markdown("---")
        st.subheader("üëÅÔ∏è Ver Detalles de Correo")
        
        # Selector de correo para ver detalles
        if emails:
            email_options = [f"{'üö®' if email['is_spam'] else '‚úÖ'} {email['subject'][:50]}..." for email in emails]
            selected_email_index = st.selectbox(
                "Seleccionar correo para ver detalles:",
                range(len(emails)),
                format_func=lambda x: email_options[x] if x < len(email_options) else "N/A"
            )
            
            if st.button("üëÅÔ∏è Ver Detalles Completos"):
                selected_email = emails[selected_email_index]
                st.session_state.selected_email = selected_email
                st.success(f"‚úÖ Correo seleccionado: {selected_email['subject']}")
                
                # Mostrar detalles inmediatamente
                self.show_email_details()
    
    def show_advanced_filters(self):
        """Muestra filtros avanzados en un expander."""
        
        with st.form("advanced_filters_form"):
            # Secci√≥n 1: Filtros b√°sicos
            st.subheader("üîç Filtros B√°sicos")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Estado de SPAM
                spam_status = st.selectbox(
                    "üö® Estado de SPAM",
                    ["Todos", "Solo SPAM", "Solo HAM"],
                    help="Filtrar por clasificaci√≥n de SPAM"
                )
                
                # B√∫squeda de texto
                search_text = st.text_input(
                    "üîç Buscar en texto",
                    placeholder="Buscar en asunto, remitente o contenido...",
                    help="Busca en asunto, remitente y contenido del correo"
                )
            
            with col2:
                # Dominio del remitente
                sender_domain = st.text_input(
                    "üåê Dominio del remitente",
                    placeholder="gmail.com, outlook.com...",
                    help="Filtrar por dominio del remitente"
                )
                
                # Cuenta de correo
                accounts = self.get_email_accounts_for_filter()
                account_options = ["Todas las cuentas"] + [acc['email'] for acc in accounts]
                selected_account = st.selectbox(
                    "üìß Cuenta de correo",
                    account_options,
                    help="Filtrar por cuenta espec√≠fica"
                )
            
            st.markdown("---")
            
            # Secci√≥n 2: Rangos de valores
            st.subheader("üìä Rangos de Valores")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Rango de confianza
                st.write("**Confianza del an√°lisis**")
                confidence_range = st.slider(
                    "Confianza",
                    min_value=0.0,
                    max_value=1.0,
                    value=(0.0, 1.0),
                    step=0.1,
                    help="Rango de confianza del an√°lisis",
                    label_visibility="collapsed"
                )
                
                # Rango de puntuaci√≥n SPAM
                st.write("**Puntuaci√≥n SPAM**")
                spam_score_range = st.slider(
                    "Puntuaci√≥n SPAM",
                    min_value=0.0,
                    max_value=1.0,
                    value=(0.0, 1.0),
                    step=0.1,
                    help="Rango de puntuaci√≥n SPAM",
                    label_visibility="collapsed"
                )
            
            with col2:
                # Tama√±o del contenido
                st.write("**Tama√±o del contenido**")
                content_length_range = st.slider(
                    "Tama√±o del contenido",
                    min_value=0,
                    max_value=10000,
                    value=(0, 10000),
                    step=100,
                    help="Rango de tama√±o del contenido",
                    label_visibility="collapsed"
                )
                
                # L√≠mite de resultados
                st.write("**M√°ximo resultados**")
                limit = st.number_input(
                    "M√°ximo resultados",
                    min_value=10,
                    max_value=1000,
                    value=100,
                    step=10,
                    help="N√∫mero m√°ximo de correos a mostrar",
                    label_visibility="collapsed"
                )
            
            st.markdown("---")
            
            # Secci√≥n 3: Fechas
            st.subheader("üìÖ Filtros de Fecha")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**Fechas de Procesamiento**")
                processed_from = st.date_input(
                    "Procesado desde",
                    value=datetime.now() - timedelta(days=30),
                    help="Fecha de inicio de procesamiento",
                    label_visibility="collapsed"
                )
                
                processed_to = st.date_input(
                    "Procesado hasta",
                    value=datetime.now(),
                    help="Fecha de fin de procesamiento",
                    label_visibility="collapsed"
                )
            
            with col2:
                st.write("**Fechas de Recepci√≥n**")
                received_from = st.date_input(
                    "Recibido desde",
                    value=datetime.now() - timedelta(days=30),
                    help="Fecha de inicio de recepci√≥n del correo",
                    label_visibility="collapsed"
                )
                
                received_to = st.date_input(
                    "Recibido hasta",
                    value=datetime.now(),
                    help="Fecha de fin de recepci√≥n del correo",
                    label_visibility="collapsed"
                )
            
            st.markdown("---")
            
            # Secci√≥n 4: Ordenamiento
            st.subheader("üìã Ordenamiento")
            
            col1, col2 = st.columns(2)
            
            with col1:
                order_by = st.selectbox(
                    "Ordenar por",
                    ["received_at", "processed_at", "subject", "sender", "spam_score", "confidence"],
                    format_func=lambda x: {
                        "received_at": "Fecha de recepci√≥n",
                        "processed_at": "Fecha de procesamiento",
                        "subject": "Asunto",
                        "sender": "Remitente",
                        "spam_score": "Puntuaci√≥n SPAM",
                        "confidence": "Confianza"
                    }[x],
                    help="Campo por el cual ordenar los resultados"
                )
            
            with col2:
                order_direction = st.selectbox(
                    "Direcci√≥n",
                    ["DESC", "ASC"],
                    format_func=lambda x: "Descendente" if x == "DESC" else "Ascendente",
                    help="Orden ascendente o descendente"
                )
            
            st.markdown("---")
            
            # Botones de acci√≥n
            col1, col2, col3 = st.columns(3)
            
            with col1:
                apply_advanced = st.form_submit_button("üîç Aplicar Filtros", type="primary")
            
            with col2:
                clear_advanced = st.form_submit_button("üóëÔ∏è Limpiar", type="secondary")
            
            with col3:
                export_advanced = st.form_submit_button("üì§ Exportar", type="secondary")
            
            if apply_advanced:
                # Construir filtros avanzados
                filters = {}
                
                # Filtros b√°sicos
                if spam_status == "Solo SPAM":
                    filters['spam_status'] = True
                elif spam_status == "Solo HAM":
                    filters['spam_status'] = False
                
                if search_text:
                    filters['search_text'] = search_text
                
                if sender_domain:
                    filters['sender_domain'] = sender_domain
                
                if selected_account != "Todas las cuentas":
                    account_id = next((acc['id'] for acc in accounts if acc['email'] == selected_account), None)
                    if account_id:
                        filters['account_id'] = account_id
                
                # Rangos de valores
                if confidence_range[0] > 0.0:
                    filters['confidence_min'] = confidence_range[0]
                if confidence_range[1] < 1.0:
                    filters['confidence_max'] = confidence_range[1]
                
                if spam_score_range[0] > 0.0:
                    filters['spam_score_min'] = spam_score_range[0]
                if spam_score_range[1] < 1.0:
                    filters['spam_score_max'] = spam_score_range[1]
                
                # Fechas
                filters['processed_date_from'] = processed_from.strftime('%Y-%m-%d')
                filters['processed_date_to'] = processed_to.strftime('%Y-%m-%d')
                filters['received_date_from'] = received_from.strftime('%Y-%m-%d')
                filters['received_date_to'] = received_to.strftime('%Y-%m-%d')
                
                # Ordenamiento
                filters['order_by'] = order_by
                filters['order_direction'] = order_direction
                filters['limit'] = limit
                
                # Aplicar filtros
                st.session_state.filtered_emails = self.get_filtered_emails(filters)
                st.success(f"‚úÖ Filtros avanzados aplicados. Encontrados {len(st.session_state.filtered_emails)} correos.")
            
            elif clear_advanced:
                if 'filtered_emails' in st.session_state:
                    del st.session_state.filtered_emails
                st.success("‚úÖ Filtros avanzados limpiados.")
            
            elif export_advanced:
                if 'filtered_emails' in st.session_state and st.session_state.filtered_emails:
                    self.export_emails_to_csv(st.session_state.filtered_emails)
                else:
                    st.warning("‚ö†Ô∏è No hay resultados para exportar. Aplica filtros primero.")
    
    def apply_quick_filters(self, spam_filter, account_filter, date_range, custom_from, custom_to, search_text):
        """Aplica filtros r√°pidos desde la sidebar."""
        filters = {}
        
        # Filtro de SPAM
        if spam_filter == "Solo SPAM":
            filters['spam_status'] = True
        elif spam_filter == "Solo HAM":
            filters['spam_status'] = False
        
        # Filtro de cuenta
        if account_filter != "Todas":
            filters['sender_domain'] = account_filter.lower().replace("gmail", "gmail.com").replace("outlook", "outlook.com").replace("yahoo", "yahoo.com")
        
        # Filtro de fecha
        if date_range == "Personalizado" and custom_from and custom_to:
            filters['received_date_from'] = custom_from.strftime('%Y-%m-%d')
            filters['received_date_to'] = custom_to.strftime('%Y-%m-%d')
        elif date_range != "Personalizado":
            # Calcular fechas basadas en el rango seleccionado
            end_date = datetime.now()
            if date_range == "√öltimas 24h":
                start_date = end_date - timedelta(days=1)
            elif date_range == "√öltimos 7 d√≠as":
                start_date = end_date - timedelta(days=7)
            elif date_range == "√öltimo mes":
                start_date = end_date - timedelta(days=30)
            elif date_range == "√öltimo a√±o":
                start_date = end_date - timedelta(days=365)
            else:
                start_date = end_date - timedelta(days=30)
            
            filters['received_date_from'] = start_date.strftime('%Y-%m-%d')
            filters['received_date_to'] = end_date.strftime('%Y-%m-%d')
        
        # Filtro de b√∫squeda
        if search_text:
            filters['search_text'] = search_text
        
        # Configuraci√≥n por defecto
        filters['order_by'] = 'received_at'
        filters['order_direction'] = 'DESC'
        filters['limit'] = 1000
        
        # Aplicar filtros
        st.session_state.filtered_emails = self.get_filtered_emails(filters)
        st.success(f"‚úÖ Filtros aplicados. Encontrados {len(st.session_state.filtered_emails)} correos.")
    
    def show_email_details(self):
        """Muestra detalles completos de un correo seleccionado."""
        st.subheader("üìã Detalles Completos")
        
        if 'selected_email' not in st.session_state:
            st.info("üëÜ Selecciona un correo de la tabla para ver sus detalles completos.")
            return
        
        email = st.session_state.selected_email
        
        # Informaci√≥n principal
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìß Informaci√≥n del Correo")
            st.write(f"**ID:** {email['id']}")
            st.write(f"**Asunto:** {email['subject']}")
            st.write(f"**Remitente:** {email['sender']}")
            st.write(f"**Destinatario:** {email['recipient']}")
            st.write(f"**Dominio:** {email['sender_domain']}")
            st.write(f"**Cuenta:** {email['account_email']}")
        
        with col2:
            st.subheader("üìä An√°lisis de SPAM")
            spam_icon = "üö®" if email['is_spam'] else "‚úÖ"
            st.write(f"**Clasificaci√≥n:** {spam_icon} {'SPAM' if email['is_spam'] else 'HAM'}")
            st.write(f"**Confianza:** {email['confidence']:.1%}")
            st.write(f"**Puntuaci√≥n SPAM:** {email['spam_score']:.3f}")
            st.write(f"**Tama√±o:** {email['content_length']} caracteres")
            st.write(f"**Procesado:** {email['processed_at']}")
            if email['received_at']:
                st.write(f"**Recibido:** {email['received_at']}")
        
        st.markdown("---")
        
        # Contenido completo
        st.subheader("üìÑ Contenido Completo")
        st.text_area("Contenido del correo", email['content'], height=300, disabled=True)
        
        # Caracter√≠sticas extra√≠das
        st.subheader("üîç Caracter√≠sticas Extra√≠das")
        self.show_email_features(email['id'])
        
        # Acciones
        st.subheader("‚ö° Acciones")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            if st.button("‚úÖ Marcar como HAM"):
                self.update_email_classification(email['id'], False)
        
        with col2:
            if st.button("üö® Marcar como SPAM"):
                self.update_email_classification(email['id'], True)
        
        with col3:
            if st.button("üì§ Reenviar"):
                st.info("üì§ Funci√≥n de reenv√≠o (en desarrollo)")
        
        with col4:
            if st.button("üóëÔ∏è Eliminar"):
                if st.checkbox("Confirmar eliminaci√≥n"):
                    self.delete_email(email['id'])
    
    def show_email_features(self, email_id: int):
        """Muestra las caracter√≠sticas extra√≠das de un correo."""
        try:
            result = self.db.cursor.execute("""
                SELECT * FROM email_features WHERE email_id = ?
            """, (email_id,)).fetchone()
            
            if result:
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.write(f"**Longitud asunto:** {result[2]} caracteres")
                    st.write(f"**Longitud contenido:** {result[3]} caracteres")
                    st.write(f"**Longitud total:** {result[4]} caracteres")
                    st.write(f"**Ratio may√∫sculas:** {result[5]:.2%}")
                
                with col2:
                    st.write(f"**Exclamaciones:** {result[6]}")
                    st.write(f"**Interrogaciones:** {result[7]}")
                    st.write(f"**S√≠mbolos $:** {result[8]}")
                    st.write(f"**Palabras urgentes:** {result[9]}")
                
                with col3:
                    st.write(f"**Palabras SPAM:** {result[10]}")
                    st.write(f"**Dominio sospechoso:** {'S√≠' if result[11] else 'No'}")
                    st.write(f"**Muchos enlaces:** {result[12]}")
                    st.write(f"**Tiene adjuntos:** {'S√≠' if result[13] else 'No'}")
            else:
                st.info("üìä No hay caracter√≠sticas extra√≠das para este correo.")
                
        except Exception as e:
            st.error(f"Error obteniendo caracter√≠sticas: {e}")
    
    def show_email_analysis(self, email: dict):
        """Muestra an√°lisis detallado de un correo."""
        st.subheader("üìä An√°lisis Detallado")
        
        # Gr√°fico de caracter√≠sticas
        features = {
            'Confianza': email['confidence'],
            'Puntuaci√≥n SPAM': email['spam_score'],
            'Longitud': email['content_length'] / 1000  # Normalizar
        }
        
        fig = go.Figure(data=[
            go.Bar(x=list(features.keys()), y=list(features.values()))
        ])
        fig.update_layout(title="Caracter√≠sticas del Correo")
        st.plotly_chart(fig, use_container_width=True)
    
    def update_email_classification(self, email_id: int, is_spam: bool):
        """Actualiza la clasificaci√≥n de un correo."""
        try:
            self.db.cursor.execute("""
                UPDATE analyzed_emails 
                SET is_spam = ?, confidence = 1.0
                WHERE id = ?
            """, (is_spam, email_id))
            self.db.conn.commit()
            st.success(f"‚úÖ Correo marcado como {'SPAM' if is_spam else 'HAM'}")
        except Exception as e:
            st.error(f"Error actualizando clasificaci√≥n: {e}")
    
    def delete_email(self, email_id: int):
        """Elimina un correo de la base de datos."""
        try:
            self.db.cursor.execute("DELETE FROM analyzed_emails WHERE id = ?", (email_id,))
            self.db.conn.commit()
            st.success("‚úÖ Correo eliminado")
        except Exception as e:
            st.error(f"Error eliminando correo: {e}")
    
    def export_emails_to_csv(self, emails: list):
        """Exporta correos filtrados a CSV."""
        try:
            import pandas as pd
            
            # Preparar datos para exportaci√≥n
            export_data = []
            for email in emails:
                export_data.append({
                    'ID': email['id'],
                    'Asunto': email['subject'],
                    'Remitente': email['sender'],
                    'Dominio': email['sender_domain'],
                    'Destinatario': email['recipient'],
                    'Es SPAM': 'S√≠' if email['is_spam'] else 'No',
                    'Confianza': f"{email['confidence']:.1%}",
                    'Puntuaci√≥n SPAM': f"{email['spam_score']:.3f}",
                    'Tama√±o': email['content_length'],
                    'Procesado': email['processed_at'],
                    'Recibido': email['received_at'] if email['received_at'] else '',
                    'Cuenta': email['account_email']
                })
            
            df = pd.DataFrame(export_data)
            
            # Generar CSV
            csv = df.to_csv(index=False, encoding='utf-8-sig')
            
            # Descargar archivo
            st.download_button(
                label="üì• Descargar CSV",
                data=csv,
                file_name=f"correos_filtrados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
            
            st.success("‚úÖ Archivo CSV generado correctamente")
            
        except Exception as e:
            st.error(f"Error exportando a CSV: {e}")

def main():
    """
    Funci√≥n principal que ejecuta la aplicaci√≥n.
    
    Esta funci√≥n:
    1. Crea la instancia de la aplicaci√≥n
    2. Ejecuta la aplicaci√≥n
    3. Maneja errores globales
    """
    try:
        # Crear y ejecutar la aplicaci√≥n
        app = SpamDetectorApp()
        app.run()
        
    except Exception as e:
        st.error(f"‚ùå Error en la aplicaci√≥n: {e}")
        logger.error(f"Error en la aplicaci√≥n: {e}")

if __name__ == "__main__":
    main() 